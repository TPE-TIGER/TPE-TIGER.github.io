openapi: 3.0.0
info:
  title: Modbus Module API
  description: Modbus module API usage
  version: 3.x.x 
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Annie.FY.Wu/modbus/3.x.x


components:

  schemas:

    config:
      description: Maximum count of config is 1.
      type: object
      properties:
        configId:
          description: Unique ID for adding Modbus role used.
          type: integer
        masterParams:
          $ref: '#/components/schemas/masterParams'
        slaveParams:
          $ref: '#/components/schemas/slaveParams'
        tcpMasters:
          $ref: '#/components/schemas/tcpMasters'
        serMasters:
          $ref: '#/components/schemas/serMasters'
        tcpSlaves:
          $ref: '#/components/schemas/tcpSlaves'
        serSlaves:
          $ref: '#/components/schemas/serSlaves'

    masterParams:
      type: array
      items:
        $ref: '#/components/schemas/masterParam'

    masterParam:
      description: Maximum count of masterParam is 1.
      type: object
      properties:
        masterParamId:
          description: Unique master parameters ID.
          type: integer
        configId:
          description: Used as foreign key for master parameters table.
          type: integer
        enableTcpMasters:
          description: Enable of all TCP masters.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        enableSerMasters:
          description: Enable of all serial masters.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        enableDevFailEvent:
          description: Enable of devices' fail event alarm.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        enableCmdFailEvent:
          description: Enable of commands' fail event alarm.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1

    slaveParams:
      type: array
      items:
        $ref: '#/components/schemas/slaveParam'

    slaveParam:
      description: Maximum count of slaveParam is 1.
      type: object
      properties:
        slaveParamId:
          description: Unique slave parameters ID.
          type: integer
        configId:
          description: Used as foreign key for slave parameters table.
          type: integer
        enableTcpSlaves:
          description: Enable of all TCP slaves.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        enableSerSlaves:
          description: Enable of all serial slaves.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        enableFailEvent:
          description: Enable of fail event alarm.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1

    serSlaves:
      type: array
      items:
        $ref: '#/components/schemas/serSlave'

    serSlave:
      description: Maximum count of serSlaves depends on the environment file.
      type: object
      properties:
        serSlaveId:
          description: Unique serial slave's ID.
          type: integer
        configId:
          description: Used as foreign key for serial slave table.
          type: integer
        slaveId:
          description: Modbus slave ID. Slave ID should be unique.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
        maxRefTagQuan:
          description: Maximum quantity of the ref-tags in this serial slave. If the value is 0, the quantity is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxRefTagByte:
          description: Maximum total bytes of the ref-tags in this serial slave. If the value is 0, the bytes is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxTagAndRefTagQuan:
          description: Maximum quantity of the (tags + ref-tags) in this serial slave. If the value is 0, the quantity is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxTagAndRefTagByte:
          description: Maximum total bytes of the (tags + ref-tags) in this serial slave. If the value is 0, the bytes is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        customTagSrcName:
          description: source name of custom dx tags of the modbus slave. e.g. 'local_device' in 'modbus_serial_server/local_device/mytag1'
          type: string
          default: local_device
          minLength: 1
          maxLength: 128
        format:
          description: Modbus serial mode.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - RTU
            - ASCII
          default: 0
        name:
          description: Serial slave's name. Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_serial_slave
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable for Modbus serial slave. Default value is 0 for TPE, 1 for others.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        szones:
          $ref: '#/components/schemas/szonesForSer'
        slaveSerIfaces:
          $ref: '#/components/schemas/slaveSerIfaces'

    tcpSlaves:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/tcpSlavesData'
       
    tcpSlavesData:
      type: array
      items:
        $ref: '#/components/schemas/tcpSlave'

    tcpSlave:
      description: Maximum count of tcpSlaves is 1.
      type: object
      properties:
        tcpSlaveId:
          description: Unique TCP slave ID.
          type: integer
        configId:
          description: Used as foreign key for TCP slave table.
          type: integer
        slaveId:
          description: Modbus slave ID.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
        listenPort:
          description: Modbus listen port. "listenPort + slaveId" should be unique.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        keepAliveTime:
          description: Modbus tcp connection keep alive time. default is 1 for Laputa, RAN; 20 for TPE
          type: integer
          minimum: 0
          maximum: 99
        name:
          description: Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_tcp_slave
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable for Modbus TCP slave. Default value is 0 for TPE, 1 for others.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        szones:
          $ref: '#/components/schemas/szonesForTcp'

    tcpSlave_with_limit_info:
      description: Maximum count of tcpSlaves is 1.
      type: object
      properties:
        tcpSlaveId:
          description: Unique TCP slave ID.
          type: integer
        configId:
          description: Used as foreign key for TCP slave table.
          type: integer
        slaveId:
          description: Modbus slave ID.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
        listenPort:
          description: Modbus listen port. "listenPort + slaveId" should be unique.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        maxRefTagQuan:
          description: Maximum quantity of the ref-tags in this tcp slave. If the value is 0, the quantity is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxRefTagByte:
          description: Maximum total bytes of the ref-tags in this tcp slave. If the value is 0, the bytes is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxTagAndRefTagQuan:
          description: Maximum quantity of the (tags + ref-tags) in this tcp slave. If the value is 0, the quantity is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        maxTagAndRefTagByte:
          description: Maximum total bytes of the (tags + ref-tags) in this tcp slave. If the value is 0, the bytes is unlimited.
          type: integer
          minimum: 0
          maximum: 2147483647
          default: 0
        customTagSrcName:
          description: source name of custom dx tags of the modbus slave. e.g. 'local_device' in 'modbus_tcp_server/local_device/mytag1'
          type: string
          default: local_device
          minLength: 1
          maxLength: 128
        keepAliveTime:
          description: Modbus tcp connection keep alive time. default is 1 for Laputa, RAN; 20 for TPE
          type: integer
          minimum: 0
          maximum: 99
        name:
          description: Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_tcp_slave
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable for Modbus TCP slave. Default value is 0 for TPE, 1 for others.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        szones:
          $ref: '#/components/schemas/szonesForTcp'

    tcpSlave_req:
      type: object
      properties:
        slaveId:
          description: Modbus slave ID.
          type: integer
          minimum: 1
          maximum: 255
          default: 1
        listenPort:
          description: Modbus listen port. "listenPort + slaveId" should be unique.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        keepAliveTime:
          description: Modbus tcp connection keep alive time. default is 1 for Laputa, RAN; 20 for TPE
          type: integer
          minimum: 0
          maximum: 99
        name:
          description: Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_tcp_slave
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable for Modbus TCP slave. Default value is 0 for TPE, 1 for others.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1

    tcpMasters:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/tcpMastersData'
       
    tcpMastersData:
      type: array
      items:
        $ref: '#/components/schemas/tcpMaster'

    tcpMaster:
      description: Maximum count of tcpMasters is 1.
      type: object
      properties:
        tcpMasterId:
          description: Unique TCP master ID.
          type: integer
        configId:
          description: Used as foreign key for TCP master table.
          type: integer
        name:
          description: Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_tcp_master
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        masterTcpIfaces:
          $ref: '#/components/schemas/masterTcpIfaces'

    serMasters:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/serMastersData'
       
    serMastersData:
      type: array
      items:
        $ref: '#/components/schemas/serMaster'

    serMaster:
      description: Maximum count of serMasters is 1.
      type: object
      properties:
        serMasterId:
          description: Unique serial master ID.
          type: integer
        configId:
          description: Used as foreign key for serial master table.
          type: integer
        name:
          description: Provider name for full-tag name used. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: modbus_serial_master
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        masterSerIfaces:
          $ref: '#/components/schemas/masterSerIfaces'

    slaveSerIfaces:
      type: array
      items:
        $ref: '#/components/schemas/slaveSerIface'

    slaveSerIface:
      description: Maximum count of slaveSerIfaces depends on the environment file.
      type: object
      required:
      - serSlaveId
      - portValue
      properties:
        slaveSerIfaceId:
          description: Slave serial interface ID.
          type: integer
        serSlaveId:
          description: Used as foreign key for slave serial interface table.
          type: integer
        portValue:
          description: Serial port index.
          type: integer

    masterSerIfaces:
      type: array
      items:
        $ref: '#/components/schemas/masterSerIface'

    masterSerIface:
      description: Maximum count of masterSerIfaces depends on the environment file.
      type: object
      required:
      - serMasterId
      - portValue
      properties:
        masterSerIfaceId:
          description: Master serial interface ID.
          type: integer
        serMasterId:
          description: Used as foreign key for master serial interface table.
          type: integer
        portValue:
          description: Serial port index which should be unique.
          type: integer
        format:
          description: Modbus serial mode (RTU, ASCII).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - RTU
            - ASCII
          default: 0
        initialDelay:
          description: When Modbus module start, activate the serial master after initial delay time (ms).
          type: integer
          minimum: 0
          maximum: 30000
          default: 0
        retryCount:
          description: Modbus retry count. When Modbus command does not get response, resend the command by define times.
          type: integer
          minimum: 0
          maximum: 5
          default: 3
        responseTout:
          description: Modbus response timeout. Modbus master wait the request command time for response (ms).
          type: integer
          minimum: 10
          maximum: 120000
          default: 1000
        frameInterval:
          description: Modbus frame interval (t3.5), 0 is used by auto baud rate setting (ms).
          type: integer
          oneOf:
            - minimum: 0
              maximum: 0
            - minimum: 10
              maximum: 500
          default: 0
        charInterval:
          description: Modbus char interval (t1.5), 0 is used by auto baud rate setting (ms).
          type: integer
          oneOf:
            - minimum: 0
              maximum: 0
            - minimum: 10
              maximum: 500
          default: 0
        remoteDevs:
          $ref: '#/components/schemas/remoteDevsForSer'

    masterTcpIfaces:
      type: array
      items:
        $ref: '#/components/schemas/masterTcpIface'

    masterTcpIface:
      description: Maximum count of masterTcpIfaces depends on the environment file.
      type: object
      required:
      - tcpMasterId
      properties:
        masterTcpIfaceId:
          description: master TCP interface ID.
          type: integer
        tcpMasterId:
          description: Used as foreign key for master TCP table.
          type: integer
        initialDelay:
          description: When Modbus module start, activate the TCP master after initial delay time (ms).
          type: integer
          minimum: 0
          maximum: 30000
          default: 0
        retryCount:
          description: Modbus retry count. When Modbus command does not get response, resend the command by define times.
          type: integer
          minimum: 0
          maximum: 5
          default: 3
        responseTout:
          description: Modbus response timeout. Modbus master wait the request command time for response (ms).
          type: integer
          minimum: 10
          maximum: 120000
          default: 1000
        remoteDevs:
          $ref: '#/components/schemas/remoteDevsForTcp'

    remoteDevsForSer:
      type: array
      items:
         $ref: '#/components/schemas/remoteDevForSer'

    remoteDevForSer:
      type: object
      required:
      - masterSerIfaceId
      properties:
        remoteDevId:
          description: Unique remote device ID.
          type: integer
        masterSerIfaceId:
          description: Master serial interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
          type: integer
        name:
          description: Device name. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: "device"
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable all of this device's polling command.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        slaveId:
          description: Slave ID of remote device. "slaveId" should be unique in a masterSerIface. "slaveId + slaveIpaddr + slaveTcpPort" should be unique in a masterTcpIface.
          type: integer
          minimum: 0
          maximum: 255
          default: 1
        slaveIpaddr:
          description: Slave IP address of remote device.
          type: string
          default: "0.0.0.0"
        slaveTcpPort:
          description: Slave IP port of remote device.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        mcmds:
          $ref: '#/components/schemas/mcmds'

    remoteDevsForTcp:
      type: array
      items:
         $ref: '#/components/schemas/remoteDevForTcp'

    remoteDevForTcp:
      type: object
      required:
      - masterTcpIfaceId
      properties:
        remoteDevId:
          description: Unique remote device ID.
          type: integer
        masterTcpIfaceId:
          description: Master TCP interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
          type: integer
        name:
          description: Device name. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: "device"
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable all of this device's polling command.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        slaveId:
          description: Slave ID of remote device. "slaveId" should be unique in a masterSerIface. "slaveId + slaveIpaddr + slaveTcpPort" should be unique in a masterTcpIface.
          type: integer
          minimum: 0
          maximum: 255
          default: 1
        slaveIpaddr:
          description: Slave IP address of remote device.
          type: string
          default: "0.0.0.0"
        slaveTcpPort:
          description: Slave IP port of remote device.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        mcmds:
          $ref: '#/components/schemas/mcmds'

    remoteDevs:
      type: array
      items:
         $ref: '#/components/schemas/remoteDev'

    remoteDev:
      description: Maximum count of serial remoteDevs is 31. Maximum count of TCP remoteDevs is 32.
      type: object
      required:
      - masterSerIfaceId
      - masterTcpIfaceId
      properties:
        remoteDevId:
          description: Unique remote device ID.
          type: integer
        masterSerIfaceId:
          description: Master serial interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
          type: integer
        masterTcpIfaceId:
          description: Master TCP interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
          type: integer
        name:
          description: Device name. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: "device"
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        enable:
          description: Enable all of this device's polling command.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        slaveId:
          description: Slave ID of remote device. "slaveId" should be unique in a masterSerIface. "slaveId + slaveIpaddr + slaveTcpPort" should be unique in a masterTcpIface.
          type: integer
          minimum: 0
          maximum: 255
          default: 1
        slaveIpaddr:
          description: Slave IP address of remote device.
          type: string
          default: "0.0.0.0"
        slaveTcpPort:
          description: Slave IP port of remote device.
          type: integer
          minimum: 1
          maximum: 65535
          default: 502
        mcmds:
          $ref: '#/components/schemas/mcmds'
      example:
        remoteDevId: 1
        masterSerIfaceId: 1
        name: "dev1"
        enable: 1
        slaveId: 1
        slaveIpaddr: "192.168.127.254"
        slaveTcpPort: 502
        mcmds:
          - mcmdId: 1
            remoteDevId: 2
            name: "read_command_1"
            mode: 1
            func: 3
            readAddress: 0
            readQuantity: 10
            writeAddress: 0
            writeQuantity: 1
            pollInterval: 100
            swap: 0
            fpFunc: 0
            fpTout: 60000
            fpData: "00 00"
            scalingFunc: 0
            interceptSlope: 1
            interceptOffset: 0
            pointSourceMin: 0
            pointSourceMax: 1
            pointTargetMin: 0
            pointTargetMax: 1
            dataType: "raw"
            tags:
              - tagId: 1
                szoneId: 1
                mcmdId: 1
                name: "read_command_tag1"
                dataType: "raw"
                dataUnit: "%"
                access: "r"
                dataSize: 20
                offset: 0

    mcmds:
      type: array
      items:
        $ref: '#/components/schemas/mcmd'
    mcmdsAutoCreateTag:
      type: array
      items:
        $ref: '#/components/schemas/mcmdAutoCreateTag'

    mcmd:
      description: Modbus command
      type: object
      required:
      - remoteDevId
      properties:
        mcmdId:
          description: Unique Modbus command name.
          type: integer
        remoteDevId:
          description: |
            Used as foreign key for mcmd table.
          type: integer
        name:
          description: Modbus command name. "name" should be unique in a remoteDev. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
          type: string
          default: command
          minLength: 1
          maxLength: 120
          pattern: '^[\w\-.~]{1,120}$'
        enable:
          description: Enable this polling command (disable, enable).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
          default: 1
        mode:
          description: Modbus command mode (cyclic, data change).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - cyclic
            - data change
          default: 0
        func:
          description: Function code
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 15
            - 16
            - 23
          x-enum-varnames:
            - read coils
            - read discrete inputs
            - read holding registers
            - read input registers
            - write single coil
            - write single register
            - write multiple coils
            - write multiple registers
            - read/write multiple registers
          default: 3
        readAddress:
          description: Reading address.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        readQuantity:
          description: Reading length (different maximum value depends on func. func 01, 02 - max 2000; func 03, 04, 23 - max 125).
          type: integer
          minimum: 1
          maximum: 2000
          default: 1
        writeAddress:
          description: Writing address.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        writeQuantity:
          description: Writing length (different maximum value depends on func. func 05, 06 - max 1; func 15 - max 1968; func 16 - max 123; func 23 - max 121).
          type: integer
          minimum: 1
          maximum: 1968
          default: 1
        pollInterval:
          description: The polling interval for this Modbus command (ms).
          type: integer
          minimum: 100
          maximum: 86400000
          default: 1000
        swap:
          $ref: '#/components/schemas/swapForMcmd'
        fpFunc:
          description: Fault protection func (keep original data, all clear to zero, user define).
          type: integer
          enum:
            - 0
            - 1
            - 2
          x-enum-varnames:
            - Pause(Data Change) / Proceed - Keep Latest Data(Cyclic)
            - Proceed - Clear data to zero
            - Proceed - Set to User-Defined Value
          default: 0
        fpTout:
          description: Fault protection timeout. After fault protection timeout, Modbus command data not update from other data will trigger fault protection function (s).
          type: integer
          minimum: 1
          maximum: 86400
          default: 3600
        fpData:
          description: User defined data for fault protection when fpFunc = 2. Data should be described as raw HEX, e.g. "1A 2B"
          type: string
          default: "00 00"
        stFunc:
          description: Status term function (Keep last data/set to zero/user defined).
          type: integer
          enum:
            - 0
            - 1
            - 2
          x-enum-varnames:
            - Pause
            - clear all data bit to 0
            - set to user defined
          default: 0
        stData:
          description: User defined data for status term when stFunc = 2. Data should be described as raw HEX, e.g. "1A 2B"
          type: string
          default: "00 00"
        scalingFunc:
          description: Modbus scaling function, (disable, intercept, point).
          type: integer
          enum:
            - 0
            - 1
            - 2
          x-enum-varnames:
            - disable
            - intercept
            - point
          default: 0
        interceptSlope:
          description: Slope for intercept of Modbus scaling function.
          type: number
          default: 1
        interceptOffset:
          description: Offset for intercept of Modbus scaling function.
          type: number
          default: 0
        pointSourceMin:
          description: Source minimum value for point of Modbus scaling function.
          type: number
          default: 0
        pointSourceMax:
          description: Source maximum value for point of Modbus scaling function.
          type: number
          default: 1
        pointTargetMin:
          description: Target minimum value for point of Modbus scaling function.
          type: number
          default: 0
        pointTargetMax:
          description: Target maximum value for point of Modbus scaling function.
          type: number
          default: 1
        tags:
          $ref: '#/components/schemas/tagsForMcmds'
      example:
        mcmdId: 1
        remoteDevId: 2
        name: "read_command_1"
        mode: 1
        func: 3
        readAddress: 0
        readQuantity: 10
        writeAddress: 0
        writeQuantity: 1
        pollInterval: 100
        swap: 0
        fpFunc: 0
        fpTout: 60000
        fpData: "00 00"
        stFunc: 0
        stData: "00 00"
        scalingFunc: 0
        interceptSlope: 1
        interceptOffset: 0
        pointSourceMin: 0
        pointSourceMax: 1
        pointTargetMin: 0
        pointTargetMax: 1
        tags:
          - tagId: 1
            szoneId: 1
            mcmdId: 1
            name: "read_command_tag1"
            dataType: "raw"
            dataUnit: "%"
            access: "r"
            dataSize: 20
            offset: 0

    mcmdAutoCreateTag:
      allOf:
        - $ref: '#/components/schemas/mcmd'
        - type: object
          properties:
            dataType:
              description: Data type of tag. Only require for "?autoCreate=tags".
              type: string
              enum:
              - boolean
              - int8
              - int16
              - int32
              - int64
              - uint8
              - uint16
              - uint32
              - uint64
              - float
              - double
              - string
              - bytearray
              - raw

    swapForMcmd:
      type: integer
      default: 0
      description: |
        The swap mode for this Modbus command.
        * 0: Big-endian (default, aka None, AB CD -> AB CD)
        * 1: Big-endian byte swap (aka Byte, AB CD -> BA DC)
        * 2: Word (deprecated)
        * 3: Byte and Word (deprecated)
        * 4: Little-endian (AB CD -> DC BA)
        * 5: Little-endian byte swap (AB CD -> CD AB)
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      x-enum-varnames:
        - Big-endian
        - Big-endian byte swap
        - Word
        - Byte and Word
        - Little-endian
        - Little-endian byte swap

    swapForSzone:
      type: integer
      default: 0
      description: |
        The swap mode for the tags and ref-tags of this szone.
        * 0: Big-endian (default, aka None, AB CD -> AB CD)
        * 1: Big-endian byte swap (aka Byte, AB CD -> BA DC)
        * 2: Word (deprecated)
        * 3: Byte and Word (deprecated)
        * 4: Little-endian (AB CD -> DC BA)
        * 5: Little-endian byte swap (AB CD -> CD AB)
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      x-enum-varnames:
        - Big-endian
        - Big-endian byte swap
        - Word
        - Byte and Word
        - Little-endian
        - Little-endian byte swap

    szonesForSer:
      type: array
      items:
        $ref: '#/components/schemas/szoneForSer'

    szoneForSer:
      type: object
      required:
      - serSlaveId
      properties:
        szoneId:
          description: Unique szone ID.
          type: integer
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        dataFormat:
          description:  Modbus data format (coil, input discrete, holding register, input register).
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          x-enum-varnames:
            - coils
            - input discrete inputs
            - holding registers
            - input registers
          default: 2
        address:
          description: Modbus start address, like Modbus command address, it used for tag mapping used.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        quan:
          description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
          type: integer
          default: 1
        swap:
          $ref: '#/components/schemas/swapForSzone'
        fromRefTaglist:
          description: Determine the slave tag is reference from tag list or created by itself.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - created by itself
            - reference from tag list
          default: 0
        tags:
          $ref: '#/components/schemas/tagsForSzones'
        refTags:
          $ref: '#/components/schemas/refTags'

    szonesForTcp:
      type: array
      items:
        $ref: '#/components/schemas/szoneForTcp'

    szoneForTcp:
      type: object
      required:
      - tcpSlaveId
      properties:
        szoneId:
          description: Unique szone ID.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        dataFormat:
          description:  Modbus data format (coil, input discrete, holding register, input register).
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          x-enum-varnames:
            - coils
            - input discrete inputs
            - holding registers
            - input registers
          default: 2
        address:
          description: Modbus start address, like Modbus command address, it used for tag mapping used. (TPE only - For refTags, -1 represent invalid)
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        quan:
          description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
          type: integer
          default: 1
        swap:
          $ref: '#/components/schemas/swapForSzone'
        fromRefTaglist:
          description: Determine the slave tag is reference from tag list or created by itself.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - created by itself
            - reference from tag list
          default: 0
        tags:
          $ref: '#/components/schemas/tagsForSzones'
        refTags:
          $ref: '#/components/schemas/refTags'

    szones:
      type: array
      items:
        $ref: '#/components/schemas/szone'

    szone:
      type: object
      properties:
        szoneId:
          description: Unique szone ID.
          type: integer
        rowId:
          description: For web sorting. Not used in TPE.
          type: integer
          minimum: 1
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        dataFormat:
          description: |
            Modbus data format.
            * 0: Coils
            * 1: Discretes Input
            * 2: Holding Registers
            * 3: Input Registers
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          x-enum-varnames:
            - coils
            - input discrete inputs
            - holding registers
            - input registers
          default: 2
        address:
          description: Modbus start address, like Modbus command address, it used for tag mapping used. (TPE only - For refTags, -1 represent invalid)
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        quan:
          description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
          type: integer
          default: 1
        swap:
          $ref: '#/components/schemas/swapForSzone'
        fromRefTaglist:
          description: Determine the slave tag is reference from tag list or created by itself.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - created by itself
            - reference from tag list
          default: 0
        tags:
          $ref: '#/components/schemas/tagsForSzones'
        refTags:
          $ref: '#/components/schemas/refTags'
      example:
        szoneId: 1
        rowId: 1
        serSlaveId: 1
        tcpSlaveId: 0
        dataFormat: 2
        address: 0
        quan: 10
        swap: 0
        fromRefTaglist: 0
        tags:
          - tagId: 1
            szoneId: 1
            mcmdId: 1
            name: "read_command_tag1"
            dataType: "raw"
            dataUnit: "%"
            access: "rw"
            dataSize: 20
            offset: 0

    szone_req:
      type: object
      properties:
        rowId:
          description: For web sorting. Not used in TPE.
          type: integer
          minimum: 1
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        dataFormat:
          description: |
            Modbus data format.
            * 0: Coils
            * 1: Discretes Input
            * 2: Holding Registers
            * 3: Input Registers
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          x-enum-varnames:
            - coils
            - input discrete inputs
            - holding registers
            - input registers
          default: 2
        address:
          description: Modbus start address, like Modbus command address, it used for tag mapping used.
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        quan:
          description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
          type: integer
          default: 1
        swap:
          $ref: '#/components/schemas/swapForSzone'
        fromRefTaglist:
          description: Determine the slave tag is reference from tag list or created by itself.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - created by itself
            - reference from tag list
          default: 0

    szonesAutoCreateTag:
      type: array
      items:
        $ref: '#/components/schemas/szoneAutoCreateTag'

    szoneAutoCreateTag:
      type: object
      required:
      - serSlaveId
      - tcpSlaveId
      properties:
        szoneId:
          description: Unique szone ID.
          type: integer
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        dataFormat:
          description:  Modbus data format (coil, input discrete, holding register, input register).
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          x-enum-varnames:
            - coils
            - input discrete inputs
            - holding registers
            - input registers
          default: 2
        address:
          description: Modbus start address, like Modbus command address, it used for tag mapping used. (TPE only - For refTags, -1 represent invalid)
          type: integer
          minimum: 0
          maximum: 65535
          default: 0
        quan:
          description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
          type: integer
          default: 1
        swap:
          $ref: '#/components/schemas/swapForSzone'
        fromRefTaglist:
          description: Determine the slave tag is reference from tag list or created by itself.
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - created by itself
            - reference from tag list
          default: 0
        tags:
          $ref: '#/components/schemas/tagsForSzones'
        refTags:
          $ref: '#/components/schemas/refTags'
        dataType:
          description: Data type of tag. Only require for "?autoCreate=tags".
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw

    szonesCreateFromRefTag:
      type: array
      items:
        $ref: '#/components/schemas/szoneCreateFromRefTag'

    szoneCreateFromRefTag:
      type: object
      required:
      - serSlaveId
      - tcpSlaveId
      - refTags
      properties:
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        swap:
          $ref: '#/components/schemas/swapForSzone'
        refTags:
          type: array
          items:
            type: object
            required:
            - prvdName
            - srcName
            - tagName
            properties:
              prvdName:
                description: provider name for full tag name used.
                type: string
              srcName:
                description: source name for full tag name used.
                type: string
              tagName:
                description: Tag name for full tag name used. "prvdName + srcName + tagName" should be unique.
                type: string

    bulkRefTags:
      type: array
      items:
        $ref: '#/components/schemas/bulkRefTag'

    bulkRefTag:
      type: object
      required:
      - serSlaveId
      - tcpSlaveId
      - refTags
      properties:
        serSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        tcpSlaveId:
          description: Used as foreign key for szone table.
          type: integer
        minStartAddr:
          description: user-defined minimal start address of the mapped szone
          type: integer
        swap:
          $ref: '#/components/schemas/swapForSzone'
        refTags:
          type: array
          items:
            type: object
            required:
            - prvdName
            - srcName
            - tagName
            properties:
              prvdName:
                description: provider name for full tag name used.
                type: string
              srcName:
                description: source name for full tag name used.
                type: string
              tagName:
                description: Tag name for full tag name used. "prvdName + srcName + tagName" should be unique.
                type: string

    tagsForMcmds:
      type: array
      items:
        $ref: '#/components/schemas/tagForMcmds'

    tagForMcmds:
      type: object
      required:
      - mcmdId
      properties:
        tagId:
          description: Unique tag ID.
          type: integer
        mcmdId:
          description: |
            Used as foreign key for tags table.
            Set either mcmdId or szoneId.
          type: integer
        name:
          description: |
              Tag name for tag mapping used. "name" should be unique in a remoteDev.
              Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
              Tag name should not be 'status'.
          type: string
          default: tag
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        dataType:
          description: Data type of tag.
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw
          default: raw
        dataUnit:
          description: Real unit description of tag (e.g. ms, s, A, mA, ...).
          type: string
        access:
          description: Tag access for publish or subscribe.
          type: string
          enum:
            - r
            - w
            - rw
          default: rw
        dataSize:
          description: |
            Data size for data type (string, bytearray, raw).
            dataSize must exist in payload if data type is string/bytearray/raw.
            dataSize must not exist in payload if data type is not string/bytearray/raw.
          type: integer
          minimum: 1
        offset:
          description: Tag's start byte offset in Modbus command.
          type: integer
          default: 0

    tagsForSzones:
      type: array
      items:
        $ref: '#/components/schemas/tagForSzone'

    tagForSzone:
      type: object
      properties:
        tagId:
          description: Unique tag ID.
          type: integer
        szoneId:
          description: |
            Used as foreign key for tags table.
            Set either mcmdId or szoneId.
          type: integer
        name:
          description: |
              Tag name for tag mapping used. "name" should be unique in a remoteDev.
              Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
              Tag name should not be 'status'.
          type: string
          default: tag
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        dataType:
          description: Data type of tag.
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw
          default: raw
        dataUnit:
          description: Real unit description of tag (e.g. ms, s, A, mA, ...).
          type: string
        access:
          description: Tag access for publish or subscribe.
          type: string
          enum:
            - r
            - w
            - rw
          default: rw
        dataSize:
          description: |
            Data size for data type (string, bytearray, raw).
            dataSize must exist in payload if data type is string/bytearray/raw.
            dataSize must not exist in payload if data type is not string/bytearray/raw.
          type: integer
          minimum: 1
        offset:
          description: Tag's start byte offset in Modbus command.
          type: integer
          default: 0

    tags:
      type: array
      items:
        $ref: '#/components/schemas/tag'

    tag:
      description: Maximum count of tags is 2048.
      type: object
      required:
      - mcmdId
      - szoneId
      properties:
        tagId:
          description: Unique tag ID.
          type: integer
        mcmdId:
          description: |
            Used as foreign key for tags table.
            Set either mcmdId or szoneId.
          type: integer
        szoneId:
          description: |
            Used as foreign key for tags table.
            Set either mcmdId or szoneId.
          type: integer
        name:
          description: |
              Tag name for tag mapping used. "name" should be unique in a remoteDev.
              Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
              Tag name should not be 'status'.
          type: string
          default: tag
          minLength: 1
          maxLength: 128
          pattern: '^[\w\-.~]{1,128}$'
        dataType:
          description: Data type of tag.
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw
          default: raw
        dataUnit:
          description: Real unit description of tag (e.g. ms, s, A, mA, ...).
          type: string
        access:
          description: Tag access for publish or subscribe.
          type: string
          enum:
            - r
            - w
            - rw
          default: rw
        dataSize:
          description: |
            Data size for data type (string, bytearray, raw).
            dataSize must exist in payload if data type is string/bytearray/raw.
            dataSize must not exist in payload if data type is not string/bytearray/raw.
          type: integer
          minimum: 1
        offset:
          description: Tag's start byte offset in Modbus command.
          type: integer
          default: 0
      example:
        tagId: 1
        szoneId: 1
        mcmdId: 1
        name: "read_command_tag1"
        dataType: "raw"
        dataUnit: "%"
        access: "rw"
        dataSize: 20
        offset: 0

    refTags:
      type: array
      items:
        $ref: '#/components/schemas/refTag'

    refTag:
      description: The tag information from taglist for slave tag reference. Maximum count of refTags depends on the environment file.
      type: object
      properties:
        refTagId:
          description: Unique ref tag ID.
          type: integer
        szoneId:
          description: Used as foreign key for refTags table.
          type: integer
        prvdName:
          description: provider name for full tag name used.
          type: string
        srcName:
          description: source name for full tag name used.
          type: string
        tagName:
          description: Tag name for full tag name used. "prvdName + srcName + tagName" should be unique.
          type: string
        dataType:
          description: Data type of tag.
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw
        access:
          description: Tag access for publish or subscribe.
          type: string
          enum:
            - r
            - w
            - rw
        dataSize:
          description: Data size for data type (string, raw, bytearray).
          type: integer
      example:
        refTagId: 1
        szoneId: 1
        prvdName: "modbus_tcp_master"
        srcName: "moxa-device"
        tagName: "voltage"
        dataType: "int32"
        access: "w"

    log_level_str:
      type: string
      description: system log level.
      enum:
        - ALL
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - FATAL
        - OFF

    protocolStatus:
      description: protocol status.
      type: object
      properties:
        data:
          type: object
          properties:
            status:
              description: |
                - For Master:
                    - 1: OK # All devices status are good
                    - 0: Warning # One or more devices status are failed. [device status failed definition] TCP: 1. connection disconnect, 2. all commands exception, 3. all commands timeout; Serial: 1. all commands exception, 2. any one command timeout
                - For Slave:
                    - 1: OK # There are 1 or more enalbed slaves
                    - 0: No slave enabled # All slaves are disabled
              type: integer
              enum:
                - 0
                - 1

    serviceInfo:
      description: service info.
      type: object
      properties:
        data:
          type: object
          properties:
            serviceInfo:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/serviceInfoTcpMaster'
                  - $ref: '#/components/schemas/serviceInfoSerMaster'
                  - $ref: '#/components/schemas/serviceInfoTcpSlave'
                  - $ref: '#/components/schemas/serviceInfoSerSlave'

    serviceInfoTcpMaster:
      description: service info of tcp master
      type: object
      properties:
        tcpMasterId:
          type: number
        serviceStatus:
          $ref: '#/components/schemas/serviceStatus'

    serviceInfoSerMaster:
      description: service info of serial master
      type: object
      properties:
        serMasterId:
          type: number
        serviceStatus:
          $ref: '#/components/schemas/serviceStatus'

    serviceInfoTcpSlave:
      description: service info of tcp slave
      type: object
      properties:
        tcpSlaveId:
          type: number
        serviceStatus:
          $ref: '#/components/schemas/serviceStatus'

    serviceInfoSerSlave:
      description: service info of serial slave
      type: object
      properties:
        serSlaveId:
          type: number
        serviceStatus:
          $ref: '#/components/schemas/serviceStatus'

    serviceStatus:
      description: service status of a inst
      type: string
      enum:
        - "NOT_INITIALIZED"
        - "INITIALIZING"
        - "RUNNING"
        - "PAUSED"
        - "RESTARTING"
        - "SHUTTING_DOWN"
        - "ERROR"

    tcpStatus:
      description: All of TCP connection diagnose information (include clients and servers).
      type: object
      properties:
        data:
          $ref: '#/components/schemas/tcpStatusData'
    
    tcpStatusData:
      description: All of TCP connection diagnose information (include clients and servers) data.
      type: object
      properties:
        modbus_tcp:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/tcpMasterDiag'
              - $ref: '#/components/schemas/tcpSlaveDiag'

    tcpMasterDiag:
      description: TCP master diagnose information.
      type: object
      properties:
        mode:
          description: text[Mode] | Mode of this TCP entry.
          type: string
          example:
            "Client"
        numConns:
          description: text[Number of connections] | The number of remote Modbus TCP slave connections.
          type: integer
        sentReqs:
          description: text[Sent requests] | The number of sent requests.
          type: integer
        recvValidResps:
          description: text[Received valid responses] | The number of received valid responses.
          type: integer
        recvInvalidResps:
          description: text[Received invalid responses] | The number of received invalid responses.
          type: integer
        recvExceptions:
          description: text[Received exceptions] | The number of received exceptions.
          type: integer
        timeout:
          description: text[Timeout] | The number of timeout request.
          type: integer
        conns:
          $ref: '#/components/schemas/tcpMasterConnStatusDiags'

    tcpMasterConnStatusDiags:
      type: array
      items:
        $ref: '#/components/schemas/tcpMasterConnStatusDiag'

    tcpMasterConnStatusDiag:
       description: TCP master connections' diagnose information. In TPE, each connetion status object is displayed data of ip:port and slave id
       properties:
        status:
          description: text[Status] | The status of TCP connection.
          type: string
          enum:
            - OK
            - Invalid_request
            - Invalid_response
            - Exception_response
            - Request_timeout
        remoteIpPort:
          description: text[Remote IP:Port] | The IP & port of TCP connection.
          type: string
        slaveId:
          description: Slave id (1-255), only TPE has this attribute.
          type: integer
        sentReqs:
          description: text[Sent requests] | The number of sent requests.
          type: integer
        recvValidResps:
          description: text[Received valid responses] | The number of received valid responses.
          type: integer
        recvInvalidResps:
          description: text[Received invalid responses] | The number of received invalid responses.
          type: integer
        recvExceptions:
          description: text[Received exceptions] | The number of received exceptions.
          type: integer
        timeout:
          description: text[Timeout] | The number of timeout request.
          type: integer

    tcpSlaveDiag:
      description: TCP slave diagnose information.
      type: object
      properties:
        mode:
          description: text[Mode] | Mode of this TCP entry.
          type: string
          example:
            "Server"
        numConns:
          description: text[Number of Connection] | The number of remote Modbus TCP master connections.
          type: integer
        recvValidReqs:
          description: text[Received valid requests] | The number of received valid requests.
          type: integer
        recvInvalidReqs:
          description: text[Received invalid requests] The number of received invalid requests.
          type: integer
        sentResps:
          description: text[Sent responses] | The number of sent responses.
          type: integer
        sentExceptions:
          description: text[Sent exceptions] | The number of sent exceptions.
          type: integer
        conns:
          $ref: '#/components/schemas/tcpSlaveConnStatusDiags'

    tcpSlaveConnStatusDiags:
      type: array
      items:
        $ref: '#/components/schemas/tcpSlaveConnStatusDiag'

    tcpSlaveConnStatusDiag:
       description: TCP slave connections' diagnose information. In TPE, each connetion status object is displayed data of ip:port
       properties:
        status:
          description: text[Status] | The status of TCP connection.
          type: string
          enum:
            - OK
            - Invalid_request
            - Exception_response
            - Drop command
        remoteIpPort:
          description: text[Remote IP:Port] | The IP & port of TCP connection.
          type: string
        recvValidReqs:
          description: text[Received valid requests] | The number of received valid requests.
          type: integer
        recvInvalidReqs:
          description: text[Received invalid requests] | The number of received invalid requests.
          type: integer
        sentResps:
          description: text[Sent responses] | The number of sent responses.
          type: integer
        sentExceptions:
          description: text[Sent exceptions] | The number of sent exceptions.
          type: integer

    serStatus:
      description: All of serial connection diagnose information (include clients and servers).
      type: object
      properties:
        data:
          $ref: '#/components/schemas/serStatusData'

    serStatusData:
      description: All of serial connection diagnose information (include clients and servers).
      type: object
      properties:
        modbus_serial:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/serMasterDiag'
              - $ref: '#/components/schemas/serSlaveDiag'

    serMasterDiag:
      description: Serial master diagnose information.
      type: object
      properties:
        role:
          description: text[Mode] | Mode of this serial entry.
          type: string
          example: Client
        sentReqs:
          description: text[Sent requests] | Total number of sent packet from master.
          type: integer
        recvValidResps:
          description: text[Received valid responses] | The number of received valid responses.
          type: integer
        recvInvalidResps:
          description: text[Received invalid responses] | The number of received invalid responses.
          type: integer
        recvCrcLrcErrors:
          description: text[Received CRC/LRC errors] | The number of received CRC/LRC errors.
          type: integer
        recvExceptions:
          description: text[Received exceptions] | The number of received exceptions.
          type: integer
        timeout:
          description: text[Timeout] | The number of timeout request.
          type: integer
        ports:
          $ref: '#/components/schemas/serMasterPortStatusDiags'

    serSlaveDiag:
      description: Serial slave diagnose information.
      type: object
      properties:
        role:
          description: text[Mode] | Mode of this serial entry.
          type: string
          example: Server
        recvValidRequest:
          description: text[Received valid requests] | The number of received valid requests.
          type: integer
        recvInvalidReqs:
          description: text[Received invalid requests] | The number of received invalid requests.
          type: integer
        recvCrcLrcErrors:
          description: text[Received CRC/LRC errors] | The number of received CRC/LRC errors.
          type: integer
        sentResps:
          description: text[Sent responses] | The number of sent responses.
          type: integer
        sentExceptions:
          description: text[Sent exceptions] | The number of sent exceptions.
          type: integer
        ports:
          $ref: '#/components/schemas/serSlavePortStatusDiags'

    serMasterPortStatusDiags:
      type: array
      items:
        $ref: '#/components/schemas/serMasterPortStatusDiag'

    serMasterPortStatusDiag:
      description: Serial port status information.
      type: object
      properties:
        mode:
          description: text[Master mode] | The mode of the serial interface.
          type: string
          enum:
            - RTU
            - ASCII
        portNumber:
          description: text[Port Number] | The port number of serial interface.
          type: integer
        break:
          description: text[Break] | The number of break.
          type: integer
        frameError:
          description: text[Frame Error] | The number of frame error.
          type: integer
        parityError:
          description: text[Parity Error] | The number of parity error.
          type: integer
        overrunError:
          description: text[Overrun Error] | The number of overrun error.
          type: integer
        sentReqs:
          description: text[Sent requests] | Total number of sent packet from master.
          type: integer
        recvValidResps:
          description: text[Received valid responses] | The number of received valid responses.
          type: integer
        recvInvalidResps:
          description: text[Received invalid responses] | The number of received invalid responses.
          type: integer
        recvCrcLrcErrors:
          description: text[Received CRC/LRC errors] | The number of received CRC/LRC errors.
          type: integer
        recvExceptions:
          description: text[Received exceptions] | The number of received exceptions.
          type: integer
        timeout:
          description: text[Timeout] | The number of timeout request.
          type: integer         

    serSlavePortStatusDiags:
      type: array
      items:
        $ref: '#/components/schemas/serSlavePortStatusDiag'
  
    serSlavePortStatusDiag:
      description: Serial port status information.
      type: object
      properties:
        mode:
          description: text[Master mode] | The mode of the serial interface.
          type: string
          enum:
            - RTU
            - ASCII
        portNumber:
          description: text[Port Number] | The port number of serial interface.
          type: integer
        slaveId:
          description: text[Slave ID] | The slave ID of slave. only in slave mode
          type: integer
        break:
          description: text[Break] | The number of break.
          type: integer
        frameError:
          description: text[Frame Error] | The number of frame error.
          type: integer
        parityError:
          description: text[Parity Error] | The number of parity error.
          type: integer
        overrunError:
          description: text[Overrun Error] | The number of overrun error.
          type: integer
        recvValidRequest:
          description: text[Received valid requests] | The number of received valid requests.
          type: integer
        recvInvalidReqs:
          description: text[Received invalid requests] | The number of received invalid requests.
          type: integer
        recvCrcLrcErrors:
          description: text[Received CRC/LRC errors] | The number of received CRC/LRC errors.
          type: integer
        sentResps:
          description: text[Sent responses] | The number of sent responses.
          type: integer
        sentExceptions:
          description: text[Sent exceptions] | The number of sent exceptions.
          type: integer

    trafficRole:
      type: string
      enum:
        - Master
        - Slave

    trafficPacketType_laputa:
      type: string
      enum:
        - Request
        - Response
        - Resend
        - Invalid
        - Unknown
        - noSupport
        - SlaveIDFail
        - Error

    trafficPacketType_tpe:
      type: string
      enum:
        - Request
        - Response

    trafficData:
      description: Data of log with hex.
      type: string
      example: 'ff030000000601030000000a'

    trafficTime_laputa:
      type: string
      example: '0.668'

    trafficTime_tpe:
      type: string
      example: '2020-01-01T12:30:10.00000+00:00'

    trafficStatus:
      type: string
      enum:
        - READ
        - WRITE

    trafficLog:
      description: Modbus traffic log.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/trafficLogData'

    trafficLogData:
      description: Modbus traffic log data.
      type: object
      properties:
        tcp:
          type: array
          items:
            type: object
            properties:
              role:
                $ref: '#/components/schemas/trafficRole'
              packetType:
                $ref: '#/components/schemas/trafficPacketType_laputa'
              ip:
                description: Remote ip and port.
                type: string
                example: '127.0.0.1:502'
              slaveId:
                type: integer
                example: 1
              functionCode:
                type: integer
                example: 3
              data:
                $ref: '#/components/schemas/trafficData'
              time:
                $ref: '#/components/schemas/trafficTime_laputa'
              status:
                $ref: '#/components/schemas/trafficStatus'
        tcpCount:
          description: Size of the array tcp.
          type: integer
        tcpAction:
          description: tcp traffic log action(stop or start).
          type: integer
        serial:
          type: array
          items:
            type: object
            properties:
              role:
                $ref: '#/components/schemas/trafficRole'
              packetType:
                $ref: '#/components/schemas/trafficPacketType_laputa'
              serialPort:
                type: integer
              dataType:
                type: string
                enum:
                  - RTU
                  - ASCII
              slaveId:
                type: integer
                example: 2
              functionCode:
                type: integer
                example: 1
              data:
                $ref: '#/components/schemas/trafficData'
              time:
                $ref: '#/components/schemas/trafficTime_laputa'
              status:
                $ref: '#/components/schemas/trafficStatus'
        serialCount:
          description: Size of the array serial.
          type: integer
        serialAction:
          description: serial traffic log action(stop or start).
          type: integer

    tcpTrafficLog:
      description: Modbus traffic log.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/trafficLogDataTcp'

    trafficLogDataTcp:
      description: Modbus traffic log data for tcp.
      type: object
      properties:
        tcp:
          type: array
          items:
            type: object
            properties:
              role:
                $ref: '#/components/schemas/trafficRole'
              packetType:
                $ref: '#/components/schemas/trafficPacketType_tpe'
              ip:
                description: Remote ip and port.
                type: string
                example: '127.0.0.1:502'
              slaveId:
                type: integer
                example: 1
              functionCode:
                type: integer
                example: 3
              data:
                $ref: '#/components/schemas/trafficData'
              time:
                $ref: '#/components/schemas/trafficTime_tpe'
              status:
                $ref: '#/components/schemas/trafficStatus'
        tcpCount:
          description: Size of the array tcp.
          type: integer

    serTrafficLog:
      description: Modbus traffic log.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/trafficLogDataSer'
          
    trafficLogDataSer:
      description: Modbus traffic log data for serial.
      type: object
      properties:
        tcp:
          type: array
          items:
            type: object
            properties:
              role:
                $ref: '#/components/schemas/trafficRole'
              packetType:
                $ref: '#/components/schemas/trafficPacketType_tpe'
              serialPort:
                description: Serial port.
                type: integer
                example: 0
              slaveId:
                type: integer
                example: 1
              functionCode:
                type: integer
                example: 3
              data:
                $ref: '#/components/schemas/trafficData'
              time:
                $ref: '#/components/schemas/trafficTime_tpe'
              status:
                $ref: '#/components/schemas/trafficStatus'
        tcpCount:
          description: Size of the array tcp.
          type: integer

    trafficAction:
      description: The action to start or stop traffic log.
      type: object
      properties:
        action:
          type: string
          enum:
            - start
            - stop

    masterOverview:
      description: Modbus master overview including TCP and serial.
      type: object
      properties:
        version:
          description: Modbus master module version.
          type: string
        enableDevFailEvent:
          description: Enable for sending event of device level failed (disable, enable).
          type: integer
          minimum: 0
          maximum: 1
        enableCmdFailEvent:
          description: Enable for sending event of command level failed (disable, enable).
          type: integer
          minimum: 0
          maximum: 1
        remoteDevsName:
          description: Modbus master remote devices name.
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 128
        tcp:
          $ref: '#/components/schemas/tcpMasterOverview'
        serial:
          $ref: '#/components/schemas/serMasterOverview'

    tcpMasterOverview:
      description: Modbus TCP master overview.
      type: object
      properties:
        enable:
          description: Enable for Modbus master TCP (disable, enable).
          type: integer
          minimum: 0
          maximum: 1
        masterTcpIfaces:
          $ref: '#/components/schemas/masterTcpIfaceOverviews'

    masterTcpIfaceOverviews:
      type: array
      items:
        $ref: '#/components/schemas/masterTcpIfaceOverview'

    masterTcpIfaceOverview:
      description: Modbus master TCP overview.
      type: object
      properties:
        masterTcpIfaceId:
          description: Used as foreign key for masterTcpIface table.
          type: integer
        devCount:
          description: Total amount of master TCP devices.
          type: integer
        cmdCount:
          description: Total amount of master TCP devices' commands.
          type: integer
        enableDevCount:
          description: Total amount of enabled master TCP devices.
          type: integer

    serMasterOverview:
      description: Modbus serial master overview
      type: object
      properties:
        enable:
          description: Enable for Modbus serial master(disable, enable).
          type: integer
          minimum: 0
          maximum: 1
        masterTcpIfaces:
          $ref: '#/components/schemas/masterSerIfacesOverviews'

    masterSerIfacesOverviews:
      type: array
      items:
        $ref: '#/components/schemas/masterSerIfacesOverview'

    masterSerIfacesOverview:
      description: Modbus master ports overview.
      type: object
      properties:
        masterSerIfaceId:
          description: Used as foreign key for masterSerIface table.
          type: integer
        portName:
          description: Port name.
          type: string
        portNumber:
          description: Port number.
          type: integer
        format:
          description: Modbus device's format (RTU, ASCII).
          type: integer
          minimum: 0
          maximum: 1
        devCount:
          description: Total amount of master port devices.
          type: integer
        cmdCount:
          description: Total amount of master port devices' commands.
          type: integer
        enableDevCount:
          description: Total amount of enabled master serial port devices.
          type: integer 

    slaveOverview:
      description: Modbus slave overview including TCP and serial.
      type: object
      properties:
        version:
          description: Modbus slave module version.
          type: string
        enableFailEvent:
          description: Enable for sending event of spec failed (disable, enable).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
        tcp:
          $ref: '#/components/schemas/tcpSlaveOverview'
        serial:
          $ref: '#/components/schemas/serSlaveOverview'

    tcpSlaveOverview:
      description: Modbus TCP slave overview.
      type: object
      properties:
        enable:
          description: Enable for Modbus slave TCP (disable, enable).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
        tcpSlaves:
          $ref: '#/components/schemas/tcpSlaveEntries'

    tcpSlaveEntries:
      type: array
      items:
        $ref: '#/components/schemas/tcpSlaveEntry'

    tcpSlaveEntry:
      description: Modbus TCP slave overview.
      type: object
      properties:
        tcpSlaveId:
          description: Used as primary key for tcp-slaves.
          type: integer
        enable:
          description: Enable for Modbus TCP slave entry (disable, enable).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
        tagCount:
          description: Total amount of slave's tags.
          type: integer
        invalidTagCount:
          description: Total amount of slave's reference tags with invalid address.
          type: integer

    serSlaveOverview:
      description: Modbus serial slave overview.
      type: object
      properties:
        enable:
          description: Enable for Modbus serial slave(disable, enable).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - disable
            - enable
        serSlaves:
          $ref: '#/components/schemas/serSlaveEntries'

    serSlaveEntries:
      type: array
      items:
        $ref: '#/components/schemas/serSlaveEntry'

    serSlaveEntry:
      description: Modbus slave ports overview.
      type: object
      properties:
        serSlaveId:
          description: Used as primary key for ser-slaves.
          type: integer
        portName:
          description: Port name
          type: string
        format:
          description: Modbus device's format (RTU, ASCII).
          type: integer
          enum:
            - 0
            - 1
          x-enum-varnames:
            - RTU
            - ASCII
        tagCount:
          description: Total amount of slave's tag.
          type: integer
        invalidTagCount:
          description: Total amount of slave's reference tags with invalid address.
          type: integer

    szone_sequence:
      description: Sequence of szoneId for specific data format
      type: array
      items:
        type: object
        required:
        - szoneId
        properties:
          szoneId:
            description: szoneId
            type: integer

    platformTaglist:
      description: Modbus tag list for platform.
      type: array
      items:
        $ref: '#/components/schemas/platformTag'

    platformTag:
      description: Modbus tag information for platform.
      type: object
      properties:
        prvdName:
          description: provider name for full tag name used.
          type: string
        srcName:
          description: source name for full tag name used.
          type: string
        tagName:
          description: Tag name for full tag name used.
          type: string
        dataType:
          description: Data type of tag.
          type: string
          enum:
          - boolean
          - int8
          - int16
          - int32
          - int64
          - uint8
          - uint16
          - uint32
          - uint64
          - float
          - double
          - string
          - bytearray
          - raw
        access:
          description: Tag access for publish or subscribe.
          type: string
          enum:
            - r
            - w
            - rw
        dataSize:
          description: Data size of tag type (raw, string, bytearray)(bytes).
          type: integer
        dataUnit:
          description: Real unit description of tag (Ex ms, s, A, mA, etc...).
          type: string
      example:
        prvdName: "modbus_tcp_master"
        srcName: "moxa_device"
        tagName: "voltage"
        dataType: "int32"
        access: "w"
        dataUnit: "%"

    error:
      required:
        - message
      properties:
        error:
          type: object
          properties:
            message:
              type: string

    error_i18n:
      required:
        - message
      properties:
        error:
          type: object
          properties:
            code:
              type: number
            message:
              type: string
            i18n:
              type: object
              properties:
                message:
                  type: object
                  properties:
                    key:
                      type: string
                    variables:
                      type: object


  responses:

    Success:
      description: Success.

    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            Unauthorized:
              value:
                error:
                  code: 401
                  message: authentication required

    UnexpectedError:
      description: Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_i18n'

    DbBadRequestError:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            Column not exists:
              value:
                error:
                  message: 'No such column: $key'
            Column constraint failed:
              value:
                error:
                  message: 'Input value failed: $constraint'
            Unique constrait failed:
              value:
                error:
                  message: '$member exists already'
            Value should be an integer:
              value:
                error:
                  message: '$key should be an integer.'
            Parent's data not exists:
              value:
                error:
                  message: "Parent's data should exist"
            Required key not exists:
              value:
                error:
                  message: "$member should exist"

    DbNotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            Member in path not found:
              value:
                error:
                  message: Member not exists

    ImportUnexpectedError:
      description: Import file error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            Column error:
              value:
                error:
                  message: Column error in $tableName
            Data error:
              value:
                error:
                  message: Data error at line $lineIndex. $subErrorMsg
            Fail to find key:
              value:
                error:
                  message: Fail to find $key
            Fail to parse:
              value:
                error:
                  message: Fail to parse line $lineIndex
            Version error:
              value:
                error:
                  message: Version error
            Invalid table:
              value:
                error:
                  message: Invalid table $tableName
            remoteDevId not exists:
              value:
                error:
                  message: Fail to find remoteDevId
            Exceed limitation:
              value:
                error:
                  code: $errCode
                  message: Exceed the limit of $limitation
                  i18n:
                    message:
                      key: $errKey
                      variables:
                        quan: $quan
                        mode: $mode

    ImportMasterResponse:
      description: Import file successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    configId:
                      description: Unique ID for adding Modbus role used.
                      type: integer
                    masterParams:
                      $ref: '#/components/schemas/masterParams'
                    tcpMasters:
                      $ref: '#/components/schemas/tcpMasters'
                    serMasters:
                      $ref: '#/components/schemas/serMasters'
              count:
                type: integer

    ImportMcmdResponse:
      description: Import file successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/mcmds'
              count:
                type: integer


paths:

  /config:
    get:
      summary: Get all of Modbus module configuration
      tags:
      - Configuration
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/config'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/master-params:
    get:
      summary: Get general parameters of masters
      tags:
      - Master Parameters
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterParams'
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all general parameters of masters
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Master Parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/masterParams'
            examples:
              modbus_put_enable_ser_masters:
                value:
                  enableSerMasters: 1
              modbus_put_enable_tcp_masters:
                value:
                  enableTcpMasters: 1
              modbus_put_enable_device_failed_event:
                value:
                  enableDevFailEvent: 1
              modbus_put_enable_command_failed_event:
                value:
                  enableCmdFailEvent: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterParams'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some general parameters of masters
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Master Parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/masterParams'
            examples:
              modbus_patch_enable_ser_masters:
                value:
                  enableSerMasters: 1
              modbus_patch_enable_tcp_masters:
                value:
                  enableTcpMasters: 1
              modbus_patch_enable_device_failed_event:
                value:
                  enableDevFailEvent: 1
              modbus_patch_enable_command_failed_event:
                value:
                  enableCmdFailEvent: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterParams'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/slave-params:
    get:
      summary: Get general parameters of slaves
      tags:
      - Slave Parameters
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveParams'
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all general parameters of slaves
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Slave Parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slaveParams'
            examples:
              modbus_put_enable_ser_slaves:
                value:
                  enableSerSlaves: 1
              modbus_put_enable_tcp_slaves:
                value:
                  enableTcpSlaves: 1
              modbus_put_enable_failed_event:
                value:
                  enableFailEvent: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveParams'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some general parameters of slaves
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Slave Parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slaveParams'
            examples:
              modbus_patch_enable_ser_slaves:
                value:
                  enableSerSlaves: 1
              modbus_patch_enable_tcp_slaves:
                value:
                  enableTcpSlaves: 1
              modbus_patch_enable_failed_event:
                value:
                  enableFailEvent: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveParams'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tcp-slaves:
    get:
      summary: Get all of TCP slaves' configurations
      tags:
      - TCP Slaves
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcpSlaves'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add TCP slave(s) configuration
      tags:
        - TCP Slaves
      requestBody:
        description: TCP slave data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/tcpSlave'
                - $ref: '#/components/schemas/tcpSlaves'
            examples:
              modbus_post_tcp_slave:
                value:
                  slaveId: 1
                  listenPort: 502
                  keepAliveTime: 1
              modbus_post_tcp_slaves:
                value:
                  - slaveId: 1
                    listenPort: 502
                    keepAliveTime: 1
                  - slaveId: 2
                    listenPort: 503
                    keepAliveTime: 1
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/tcpSlave'
                      - $ref: '#/components/schemas/tcpSlaves'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all TCP slaves configuration
      tags:
      - TCP Slaves
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tcp-slaves/{tcpSlaveId}:
    get:
      summary: Get specific TCP slave's configuration
      tags:
      - TCP Slaves
      parameters:
        - name: tcpSlaveId
          in : "path"
          description: ID of tcpSlave.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpSlave_with_limit_info'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    delete:
      summary: Delete specific TCP slave's configuration
      tags:
      - TCP Slaves
      parameters:
        - name: tcpSlaveId
          in : "path"
          description: ID of tcpSlave.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of TCP slave configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - TCP Slaves
      parameters:
        - name: tcpSlaveId
          in: "path"
          description: ID of tcpSlave.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tcpSlaves'
            examples:
              modbus_put_tcp_slave:
                value:
                  slaveId: 1
                  listenPort: 502
                  keepAliveTime: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpSlave'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    patch:
      summary: Modify some of specific TCP slave configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - TCP Slaves
      parameters:
        - name: tcpSlaveId
          in: "path"
          description: ID of tcpSlave.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tcpSlave_req'
            examples:
              modify slaveId:
                value:
                  slaveId: 1
              modify listenPort:
                value:
                  listenPort: 502
              enable tcp slave:
                value:
                  enable: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpSlave'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'

  /config/ser-slaves:
    get:
      summary: Get all of serial slaves' configurations
      tags:
      - Serial Slaves
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serSlaves'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add serial slave(s) configuration
      tags:
        - Serial Slaves
      requestBody:
        description: Serial slave data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/serSlave'
                - $ref: '#/components/schemas/serSlaves'
            examples:
              modbus_post_ser_slave_RTU:
                value:
                  slaveId: 1
                  format: 0
              modbus_post_ser_slave_ASCII:
                value:
                  slaveId: 1
                  format: 1
              modbus_post_ser_slaves_RTU:
                value:
                  - slaveId: 1
                    format: 0
                  - slaveId: 2
                    format: 0
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/serSlave'
                      - $ref: '#/components/schemas/serSlaves'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all serial slaves configuration
      tags:
      - Serial Slaves
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/ser-slaves/{serSlaveId}:
    get:
      summary: Get specific serial slave's configuration
      tags:
      - Serial Slaves
      parameters:
        - name: "serSlaveId"
          in : "path"
          description: ID of serSlave.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serSlave'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific serial slave's configuration
      tags:
      - Serial Slaves
      parameters:
        - name: serSlaveId
          in : "path"
          description: ID of serSlave.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of serial slave configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Serial Slaves
      parameters:
        - name: serSlaveId
          in: "path"
          description: ID of serSlave.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serSlaves'
            examples:
              modbus_put_ser_slave_RTU:
                value:
                  slaveId: 1
                  format: 0
              modbus_put_ser_slave_ASCII:
                value:
                  slaveId: 1
                  format: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serSlave'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific serial slave configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Serial Slaves
      parameters:
        - name: serSlaveId
          in: "path"
          description: ID of serSlave.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serSlaves'
            examples:
              modbus_patch_ser_slave_RTU:
                value:
                  slaveId: 1
                  format: 0
              modbus_patch_ser_slave_ASCII:
                value:
                  slaveId: 1
                  format: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serSlave'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tcp-masters:
    get:
      summary: Get all of TCP masters' configurations
      tags:
      - TCP Masters
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcpMasters'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add TCP master(s) configuration
      tags:
        - TCP Masters
      requestBody:
        description: TCP master data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/tcpMaster'
              - $ref: '#/components/schemas/tcpMasters'
            examples:
              modbus_post_tcp_master:
                value:
              modbus_post_tcp_masters:
                value:
                  -
                  -
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/tcpMaster'
                      - $ref: '#/components/schemas/tcpMasters'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all TCP masters configuration
      tags:
      - TCP Masters
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tcp-masters/{tcpMasterId}:
    get:
      summary: Get specific TCP master's configuration
      tags:
      - TCP Masters
      parameters:
        - name: "tcpMasterId"
          in : "path"
          description: ID of tcpMaster.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific TCP master's configuration
      tags:
      - TCP Masters
      parameters:
        - name: tcpMasterId
          in : "path"
          description: ID of tcpMaster.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of TCP master configuration
      description: The configuration which does not belong to the request would be the default value
      tags:
      - TCP Masters
      parameters:
        - name: tcpMasterId
          in: "path"
          description: ID of tcpMaster.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tcpMaster'
            examples:
              modbus_put_tcp_master:
                value:
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific TCP master configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - TCP Masters
      parameters:
        - name: tcpMasterId
          in: "path"
          description: ID of tcpMaster.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tcpMaster'
            examples:
              modbus_patch_tcp_master:
                value:
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tcpMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/ser-masters:
    get:
      summary: Get all of serial masters' configurations
      tags:
      - Serial Masters
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serMasters'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add serial master(s) configuration
      tags:
        - Serial Masters
      requestBody:
        description: Serial master data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/serMaster'
              - $ref: '#/components/schemas/serMasters'
            examples:
              modbus_post_serial_master:
                value:
              modbus_post_serial_masters:
                value:
                  -
                  -
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/serMaster'
                      - $ref: '#/components/schemas/serMasters'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all serial masters configuration
      tags:
      - Serial Masters
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/ser-masters/{serMasterId}:
    get:
      summary: Get specific serial master's configuration
      tags:
      - Serial Masters
      parameters:
        - name: "serMasterId"
          in : "path"
          description: ID of serMaster.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific serial master's configuration
      tags:
      - Serial Masters
      parameters:
        - name: serMasterId
          in : "path"
          description: ID of serMaster.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of serial master configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Serial Masters
      parameters:
        - name: serMasterId
          in: "path"
          description: ID of serMaster.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serMaster'
            examples:
              modbus_put_serial_master:
                value:
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific serial master configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Serial Masters
      parameters:
        - name: serMasterId
          in: "path"
          description: ID of serMaster.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serMaster'
            examples:
              modbus_patch_serial_master:
                value:
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/serMaster'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/master-tcp-ifaces:
    get:
      summary: Get all of master TCPs' configurations
      tags:
      - Master TCP Interfaces
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterTcpIfaces'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add master TCP(s) configuration
      tags:
        - Master TCP Interfaces
      requestBody:
        description: TCP data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/masterTcpIface'
                - $ref: '#/components/schemas/masterTcpIfaces'
            examples:
              modbus_tcp_master_post_master_tcp:
                value:
                  tcpMasterId: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
              modbus_tcp_master_post_masters_tcp:
                value:
                  - tcpMasterId: 1
                    initialDelay: 0
                    retryCount: 3
                    responseTout: 1000
                  - tcpMasterId: 2
                    initialDelay: 0
                    retryCount: 3
                    responseTout: 1000
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/masterTcpIface'
                      - $ref: '#/components/schemas/masterTcpIface'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all master TCPs configuration
      tags:
      - Master TCP Interfaces
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/master-tcp-ifaces/{masterTcpIfaceId}:
    get:
      summary: Get specific master TCP's configuration
      tags:
      - Master TCP Interfaces
      parameters:
        - name: "masterTcpIfaceId"
          in : "path"
          description: ID of TCP.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterTcpIface'
        400:
          $ref: '#/components/responses/UnexpectedError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    delete:
      summary: Delete specific master TCP's configuration
      tags:
      - Master TCP Interfaces
      parameters:
        - name: masterTcpIfaceId
          in : "path"
          description: ID of TCP.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    put:
      summary: Modify all of master TCP configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Master TCP Interfaces
      parameters:
        - name: masterTcpIfaceId
          in: "path"
          description: ID of TCP.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/masterTcpIface'
            examples:
              modbus_tcp_master_put_master_tcp:
                value:
                  tcpMasterId: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterTcpIface'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    patch:
      summary: Modify some of specific master TCP configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Master TCP Interfaces
      parameters:
        - name: masterTcpIfaceId
          in: "path"
          description: ID of TCP.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/masterTcpIface'
            examples:
              modbus_tcp_master_patch_master_tcp:
                value:
                  tcpMasterId: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterTcpIface'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'

  /config/master-ser-ifaces:
    get:
      summary: Get all of master ports' configurations
      tags:
      - Master Serial Interfaces
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterSerIfaces'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add master port(s) configuration
      tags:
        - Master Serial Interfaces
      requestBody:
        description: Port data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/masterSerIface'
                - $ref: '#/components/schemas/masterSerIfaces'
            examples:
              modbus_serial_master_post_master_port0:
                value:
                  serMasterId: 1
                  portValue: 0
                  format: 0
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
              modbus_serial_master_post_master_port1_ASCII:
                value:
                  serMasterId: 1
                  portValue: 1
                  format: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
              modbus_serial_master_post_masters_ports_ASCII:
                value:
                  - serMasterId: 1
                    portValue: 1
                    format: 1
                    initialDelay: 0
                    retryCount: 3
                    responseTout: 1000
                    frameInterval: 0
                    charInterval: 0
                  - serMasterId: 2
                    portValue: 2
                    format: 1
                    initialDelay: 0
                    retryCount: 3
                    responseTout: 1000
                    frameInterval: 0
                    charInterval: 0
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/masterSerIface'
                      - $ref: '#/components/schemas/masterSerIfaces'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all master ports configuration
      tags:
      - Master Serial Interfaces
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/master-ser-ifaces/{masterSerIfaceId}:
    get:
      summary: Get specific master port's configuration
      tags:
      - Master Serial Interfaces
      parameters:
        - name: "masterSerIfaceId"
          in : "path"
          description: ID of port.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterSerIface'
        400:
          $ref: '#/components/responses/UnexpectedError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    delete:
      summary: Delete specific master port's configuration
      tags:
      - Master Serial Interfaces
      parameters:
        - name: masterSerIfaceId
          in : "path"
          description: ID of port.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Success
        400:
          $ref: '#/components/responses/UnexpectedError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    put:
      summary: Modify all of master port configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Master Serial Interfaces
      parameters:
        - name: masterSerIfaceId
          in: "path"
          description: ID of port.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/masterSerIface'
            examples:
              modbus_serial_master_put_master_port0:
                value:
                  serMasterId: 1
                  portValue: 0
                  format: 0
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
              modbus_serial_master_put_master_port1_ASCII:
                value:
                  serMasterId: 1
                  portValue: 1
                  format: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterSerIface'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'
    patch:
      summary: Modify some of specific master port configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Master Serial Interfaces
      parameters:
        - name: masterSerIfaceId
          in: "path"
          description: ID of port.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/masterSerIface'
            examples:
              modbus_serial_master_patch_master_port0:
                value:
                  serMasterId: 1
                  portValue: 0
                  format: 0
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
              modbus_serial_master_patch_master_port1_ASCII:
                value:
                  serMasterId: 1
                  portValue: 1
                  format: 1
                  initialDelay: 0
                  retryCount: 3
                  responseTout: 1000
                  frameInterval: 0
                  charInterval: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterSerIface'
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'

  /config/slave-ser-ifaces:
    get:
      summary: Get all of slave ports' configurations
      tags:
      - Slave Serial Interfaces
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveSerIfaces'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add slave port(s) configuration
      tags:
        - Slave Serial Interfaces
      requestBody:
        description: Port data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/slaveSerIface'
              - $ref: '#/components/schemas/slaveSerIfaces'
            examples:
              modbus_serial_slave_post_slave_port:
                value:
                  serSlaveId: 1
                  portValue: 0
              modbus_serial_slave_post_slave_ports:
                value:
                  - serSlaveId: 1
                    portValue: 0
                  - serSlaveId: 1
                    portValue: 1
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/slaveSerIface'
                      - $ref: '#/components/schemas/slaveSerIfaces'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all slave ports configuration
      tags:
      - Slave Serial Interfaces
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/slave-ser-ifaces/{slaveSerIfaceId}:
    get:
      summary: Get specific slave port's configuration
      tags:
      - Slave Serial Interfaces
      parameters:
        - name: "slaveSerIfaceId"
          in : "path"
          description: ID of port.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveSerIface'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific slave port's configuration
      tags:
      - Slave Serial Interfaces
      parameters:
        - name: slaveSerIfaceId
          in : "path"
          description: ID of port.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of slave port configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Slave Serial Interfaces
      parameters:
        - name: slaveSerIfaceId
          in: "path"
          description: ID of port.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slaveSerIfaces'
            examples:
              modbus_serial_slave_put_slave_port:
                value:
                  serSlaveId: 1
                  portValue: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveSerIface'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific slave port configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Slave Serial Interfaces
      parameters:
        - name: slaveSerIfaceId
          in: "path"
          description: ID of port.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slaveSerIfaces'
            examples:
              modbus_serial_slave_patch_slave_port:
                value:
                  serSlaveId: 1
                  portValue: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveSerIface'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/remote-devs:
    get:
      summary: Get all of remote devices' configurations
      tags:
      - Remote Devices
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/remoteDevs'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add remote device(s) configuration
      tags:
        - Remote Devices
      parameters:
        - in: query
          name: autoCreate
          description: /remote-devs?autoCreate=tags would create tags automatically. dataType must be added in payload of mcmds.
          schema:
            type: string
            enum: [tags]
      requestBody:
        description:  remote device data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/remoteDev'
                - $ref: '#/components/schemas/remoteDevs'
            examples:
              modbus_serial_master_post_remote_device:
                value:
                  masterSerIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveId: 1
              modbus_tcp_master_post_remote_device:
                value:
                  masterTcpIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveIpaddr: "0.0.0.0"
                  slaveTcpPort: 502
              modbus_tcp_master_post_remote_devices:
                value:
                  - masterTcpIfaceId: 1
                    name: "dev1"
                    enable: 1
                    slaveIpaddr: "0.0.0.0"
                    slaveTcpPort: 502
                  - masterTcpIfaceId: 1
                    name: "dev2"
                    enable: 1
                    slaveIpaddr: "0.0.0.1"
                    slaveTcpPort: 503
              modbus_tcp_master_post_remote_device_with_auto_create_tags:
                value:
                  masterTcpIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveIpaddr: "0.0.0.0"
                  slaveTcpPort: 502
                  mcmds: [{"name":"mcmd1","dataType":"raw","func":3, "readQuantity":10},{"name":"mcmd2","dataType":"raw", "func":3, "readQuantity":10}]
          multipart/form-data:
            schema:
              type: object
              properties:
                mcmdsFile:
                  description: Master command csv file.
                  type: string
                masterSerIfaceId:
                  description: Master serial interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
                  type: string
                masterTcpIfaceId:
                  description: Master TCP interface ID. Either "masterSerIfaceId" or "masterTcpIfaceId" should be set.
                  type: string
                name:
                  description: Device name. "name" should be unique. Allowed characters are ALPHA / DIGIT / "-" / "." / "_" / "~".
                  type: string
                  minLength: 1
                  maxLength: 128
                  pattern: '^[\w\-.~]{1,128}$'
                enable:
                  description: Enable all of this device's polling command.
                  type: string
                slaveId:
                  description: Slave ID of remote device. "slaveId" should be unique in a masterSerIface. "slaveId + slaveIpaddr + slaveTcpPort" should be unique in a masterTcpIface.
                  type: integer
                slaveIpaddr:
                  description: Slave IP address of remote device.
                  type: string
                slaveTcpPort:
                  description: Slave IP port of remote device.
                  type: string
            encoding:
              mcmdsFile:
                  contentType: csv
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/remoteDev'
                      - $ref: '#/components/schemas/remoteDevs'
        400:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnexpectedError'
              examples:
                modbus_master_command_quantity_out_of_limit:
                  value:
                    error:
                      code: -113
                      message: Exceed the limit of 128 commands per tcp port
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_COMMAND_LIMIT_FAIL
                          variables:
                            quan: 128
                            mode: tcp
                modbus_master_byte_quantity_out_of_limit:
                  value:
                    error:
                      code: -114
                      message: Exceed the limit of 2048 read byte quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_BYTE_LIMIT_FAIL
                          variables:
                            quan: 2048
                            type: read
                modbus_master_tag_quantity_out_of_limit:
                  value:
                    error:
                      code: -115
                      message: Exceed the limit of 1024 read tag quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_TAG_LIMIT_FAIL
                          variables:
                            quan: 1024
                            type: read
                modbus_master_general_failed:
                  value:
                    error:
                      code: -1
                      message: "Column error in [tableName]"
    delete:
      summary: Delete all remote devices configuration
      tags:
      - Remote Devices
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/remote-devs/{remoteDevId}:
    get:
      summary: Get specific remote device's configuration
      tags:
      - Remote Devices
      parameters:
        - name: "remoteDevId"
          in : "path"
          description: ID of remoteDev.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/remoteDev'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific remote device's configuration
      tags:
      - Remote Devices
      parameters:
        - name: remoteDevId
          in : "path"
          description: ID of remoteDev.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of remote device configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Remote Devices
      parameters:
        - name: remoteDevId
          in: "path"
          description: ID of remoteDev.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remoteDev'
            examples:
              modbus_serial_master_put_remote_device:
                value:
                  masterSerIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveId: 1
              modbus_tcp_master_put_remote_device:
                value:
                  masterTcpIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveIpaddr: "0.0.0.0"
                  slaveTcpPort: 502
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/remoteDev'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific remote device configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Remote Devices
      parameters:
        - name: remoteDevId
          in: "path"
          description: ID of remoteDev.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remoteDev'
            examples:
              modbus_serial_master_patch_remote_device:
                value:
                  masterSerIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveId: 1
              modbus_tcp_master_patch_remote_device:
                value:
                  masterTcpIfaceId: 1
                  name: "dev1"
                  enable: 1
                  slaveIpaddr: "0.0.0.0"
                  slaveTcpPort: 502
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/remoteDev'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/mcmds:
    get:
      summary: Get all of master commands' configurations
      tags:
      - Master Commands
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/mcmds'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add master command(s) configuration
      tags:
        - Master Commands
      parameters:
        - in: query
          name: autoCreate
          description: |
            /mcmds?autoCreate=tags would create tags automatically. dataType must be added in payload.
            
            *Naming rules of auto-created tags:
            - Only 1 tag is auto-created:
              - tag name = {command name}
            - Multiple tags are auto-created:
              - tag name = {command name} + "_t" + {index (1-based)}
              
            E.g. If device name = "dev1", command name = "cmd1", 3 tags are auto-created, then the topic (full name) of the tags are:
            - "modbus_tcp_master/dev1/cmd1_t1"
            - "modbus_tcp_master/dev1/cmd1_t2"
            - "modbus_tcp_master/dev1/cmd1_t3"
            
            [reference in *Confluence*](https://moxacorp.atlassian.net/wiki/spaces/PMT/pages/222069329/R+Modbus+Master#%5BMBM-18%5D-Auto-Create-Tags)
          schema:
            type: string
            enum: [tags]
      requestBody:
        description: Master command data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/mcmd'
                - $ref: '#/components/schemas/mcmds'
                - $ref: '#/components/schemas/mcmdAutoCreateTag'
                - $ref: '#/components/schemas/mcmdsAutoCreateTag'
            examples:
              modbus_master_post_read_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 1
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_post_read_coils_commands:
                value:
                  - remoteDevId: 1
                    name: "cmd1"
                    mode: 0
                    func: 1
                    readAddress: 0
                    readQuantity: 10
                    pollInterval: 1000
                    swap: 0
                  - remoteDevId: 2
                    name: "cmd2"
                    mode: 1
                    func: 1
                    readAddress: 10
                    readQuantity: 10
                    pollInterval: 1000
                    swap: 0
              modbus_master_post_read_coils_command_with_auto_create_tags:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
                  dataType: "boolean"
              modbus_master_post_read_coils_commands_with_auto_create_tags:
                value:
                  - remoteDevId: 1
                    name: "cmd1"
                    mode: 0
                    func: 1
                    readAddress: 0
                    readQuantity: 10
                    pollInterval: 1000
                    swap: 0
                    dataType: "boolean"
                  - remoteDevId: 1
                    name: "cmd2"
                    mode: 1
                    func: 1
                    readAddress: 10
                    readQuantity: 10
                    pollInterval: 1000
                    swap: 0
                    dataType: "boolean"
              modbus_master_post_read_discrete_inputs_command:
                value:
                  remoteDevId: 1
                  name: "cmd2"
                  mode: 0
                  func: 2
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_post_read_holding_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd3"
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_post_read_input_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd4"
                  mode: 0
                  func: 4
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_post_write_single_coil_command:
                value:
                  remoteDevId: 1
                  name: "cmd5"
                  mode: 1
                  func: 5
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_post_write_single_register_command:
                value:
                  remoteDevId: 1
                  name: "cmd6"
                  mode: 1
                  func: 6
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_post_write_multiple_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd15"
                  mode: 1
                  func: 15
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_post_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd16"
                  mode: 1
                  func: 16
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_post_read_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd23"
                  mode: 1
                  func: 23
                  readAddress: 0
                  readQuantity: 10
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_post_write_command_with_fault_protection:
                value:
                  remoteDevId: 1
                  name: "cmd6"
                  mode: 1
                  func: 6
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
                  fpFunc: 1
                  fpTout: 60000
              modbus_master_post_write_command_with_fault_protection_user_defined:
                value:
                  remoteDevId: 1
                  name: "cmd6"
                  mode: 1
                  func: 6
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
                  fpFunc: 2
                  fpTout: 60000
                  fpData: "00 00"
              modbus_master_post_read_coils_command_with_status_term:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
                  stFunc: 1
              modbus_master_post_read_registers_command_with_status_term_user_defined:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 2
                  pollInterval: 1000
                  swap: 0
                  stFunc: 2
                  stData: "00 00 00 00"
              modbus_master_post_read_command_with_scaling:
                value:
                  remoteDevId: 1
                  name: "cmd3"
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
                  scalingFunc: 1
                  interceptSlope: 1
                  interceptOffset: 0
              modbus_master_post_read_command_with_single_tag:
                value:
                  remoteDevId: 1
                  name: "read_command_single_tag"
                  enable: 1
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 2
                  tags:
                    - name: "read_command_single_tag"
                      dataType: "int32"
                      access: "r"
              modbus_master_post_read_command_with_multiple_tag:
                value:
                  remoteDevId: 1
                  name: "read_command_multiple_tag"
                  enable: 1
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 5
                  tags:
                    - name: "read_command_multiple_tag1"
                      dataType: "int16"
                      access: "r"
                    - name: "read_command_multiple_tag2"
                      dataType: "int16"
                      access: "r"
                    - name: "read_command_multiple_tag3"
                      dataType: "int16"
                      access: "r"
                    - name: "read_command_multiple_tag4"
                      dataType: "int16"
                      access: "r"
                    - name: "read_command_multiple_tag5"
                      dataType: "int16"
                      access: "r"
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/mcmd'
                      - $ref: '#/components/schemas/mcmds'
        400:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnexpectedError'
              examples:
                modbus_master_command_quantity_out_of_limit:
                  value:
                    error:
                      code: -113
                      message: Exceed the limit of 128 commands per tcp port
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_COMMAND_LIMIT_FAIL
                          variables:
                            quan: 128
                            mode: tcp
                modbus_master_byte_quantity_out_of_limit:
                  value:
                    error:
                      code: -114
                      message: Exceed the limit of 2048 read byte quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_BYTE_LIMIT_FAIL
                          variables:
                            quan: 2048
                            type: read
                modbus_master_tag_quantity_out_of_limit:
                  value:
                    error:
                      code: -115
                      message: Exceed the limit of 1024 read tag quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_TAG_LIMIT_FAIL
                          variables:
                            quan: 1024
                            type: read
                modbus_master_general_failed:
                  value:
                    error:
                      code: -1
                      message: "Column error in [tableName]"
    delete:
      summary: Delete all master command configuration
      tags:
      - Master Commands
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/mcmds/{mcmdId}:
    get:
      summary: Get specific master command's configuration
      tags:
      - Master Commands
      parameters:
        - name: "mcmdId"
          in : "path"
          description: ID of mcmd.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/mcmd'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific master command's configuration
      tags:
      - Master Commands
      parameters:
        - name: mcmdId
          in : "path"
          description: ID of mcmd.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of master command configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Master Commands
      parameters:
        - name: mcmdId
          in: "path"
          description: ID of mcmd.
          required: true
          schema:
            type: string
        - in: query
          name: autoCreate
          description: /mcmds?autoCreate=tags would create tags automatically. dataType must be added in payload.
          schema:
            type: string
            enum: [tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/mcmd'
                - $ref: '#/components/schemas/mcmdAutoCreateTag'
            examples:
              modbus_master_put_read_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_put_read_coils_command_with_auto_create_tags:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
                  dataType: "boolean"
              modbus_master_put_read_discrete_inputs_command:
                value:
                  remoteDevId: 1
                  name: "cmd2"
                  mode: 0
                  func: 2
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_put_read_holding_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd3"
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_put_read_input_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd4"
                  mode: 0
                  func: 4
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_put_write_single_coil_command:
                value:
                  remoteDevId: 1
                  name: "cmd5"
                  mode: 1
                  func: 5
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_put_write_single_register_command:
                value:
                  remoteDevId: 1
                  name: "cmd6"
                  mode: 1
                  func: 6
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_put_write_multiple_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd15"
                  mode: 1
                  func: 15
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_put_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd16"
                  mode: 1
                  func: 16
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_put_read_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd23"
                  mode: 1
                  func: 23
                  readAddress: 0
                  readQuantity: 10
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/mcmd'
        400:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnexpectedError'
              examples:
                modbus_master_command_quantity_out_of_limit:
                  value:
                    error:
                      code: -113
                      message: Exceed the limit of 128 commands per tcp port
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_COMMAND_LIMIT_FAIL
                          variables:
                            quan: 128
                            mode: tcp
                modbus_master_byte_quantity_out_of_limit:
                  value:
                    error:
                      code: -114
                      message: Exceed the limit of 2048 read byte quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_BYTE_LIMIT_FAIL
                          variables:
                            quan: 2048
                            type: read
                modbus_master_tag_quantity_out_of_limit:
                  value:
                    error:
                      code: -115
                      message: Exceed the limit of 1024 read tag quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_TAG_LIMIT_FAIL
                          variables:
                            quan: 1024
                            type: read
                modbus_master_general_failed:
                  value:
                    error:
                      code: -1
                      message: "Column error in [tableName]"
    patch:
      summary: Modify some of specific master command configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Master Commands
      parameters:
        - name: mcmdId
          in: "path"
          description: ID of mcmd.
          required: true
          schema:
            type: string
        - in: query
          name: autoCreate
          description: /mcmds?autoCreate=tags would create tags automatically. dataType must be added in payload.
          schema:
            type: string
            enum: [tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/mcmd'
                - $ref: '#/components/schemas/mcmdAutoCreateTag'
            examples:
              modbus_master_patch_read_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_patch_read_coils_command_with_auto_create_tags:
                value:
                  remoteDevId: 1
                  name: "cmd1"
                  mode: 0
                  func: 1
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
                  dataType: "boolean"
              modbus_master_patch_read_discrete_inputs_command:
                value:
                  remoteDevId: 1
                  name: "cmd2"
                  mode: 0
                  func: 2
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_patch_read_holding_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd3"
                  mode: 0
                  func: 3
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_patch_read_input_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd4"
                  mode: 0
                  func: 4
                  readAddress: 0
                  readQuantity: 10
                  pollInterval: 1000
                  swap: 0
              modbus_master_patch_write_single_coil_command:
                value:
                  remoteDevId: 1
                  name: "cmd5"
                  mode: 1
                  func: 5
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_patch_write_single_register_command:
                value:
                  remoteDevId: 1
                  name: "cmd6"
                  mode: 1
                  func: 6
                  writeAddress: 0
                  writeQuantity: 1
                  swap: 0
              modbus_master_patch_write_multiple_coils_command:
                value:
                  remoteDevId: 1
                  name: "cmd15"
                  mode: 1
                  func: 15
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_patch_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd16"
                  mode: 1
                  func: 16
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
              modbus_master_patch_read_write_multiple_registers_command:
                value:
                  remoteDevId: 1
                  name: "cmd23"
                  mode: 1
                  func: 23
                  readAddress: 0
                  readQuantity: 10
                  writeAddress: 0
                  writeQuantity: 10
                  swap: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/mcmd'
        400:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnexpectedError'
              examples:
                modbus_master_command_quantity_out_of_limit:
                  value:
                    error:
                      code: -113
                      message: Exceed the limit of 128 commands per tcp port
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_COMMAND_LIMIT_FAIL
                          variables:
                            quan: 128
                            mode: tcp
                modbus_master_byte_quantity_out_of_limit:
                  value:
                    error:
                      code: -114
                      message: Exceed the limit of 2048 read byte quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_BYTE_LIMIT_FAIL
                          variables:
                            quan: 2048
                            type: read
                modbus_master_tag_quantity_out_of_limit:
                  value:
                    error:
                      code: -115
                      message: Exceed the limit of 1024 read tag quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_TAG_LIMIT_FAIL
                          variables:
                            quan: 1024
                            type: read
                modbus_master_general_failed:
                  value:
                    error:
                      code: -1
                      message: "Column error in [tableName]"

  /config/szones:
    get:
      summary: Get all of slave zones' configurations
      tags:
      - Slave Zones
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szones'
              examples:
                get_szones_with_refTags:
                  value:
                    data:
                      - szoneId: 1
                        rowId: 0
                        tcpSlaveId: 1
                        dataFormat: 3
                        address: 0
                        quan: 1
                        swap: 0
                        fromRefTaglist: 1
                        tags: []
                        refTags:
                          - refTagId: 1
                            szoneId: 1
                            prvdName: "modbus_tcp_master"
                            srcName: "moxa-device"
                            tagName: "voltage"
                            access: "r"
                            dataType: "uint16"
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add slave zone(s) configuration
      tags:
        - Slave Zones
      parameters:
        - in: query
          name: autoCreate
          description: /szones?autoCreate=tags would create tags automatically. dataType must be added in payload.
          schema:
            type: string
            enum: [tags]
        - in: query
          name: createFromRefTag
          description: /szones?createFromRefTag=true would fill the value of dataFormat, address and quantity automatically. The access, dataType, dataSize of the ref-tag are fetched by mx-modbus automatically.
          schema:
            type: boolean
            enum: [true, false]
      requestBody:
        description: Slave zone data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/szone'
                - $ref: '#/components/schemas/szones'
                - $ref: '#/components/schemas/szoneAutoCreateTag'
                - $ref: '#/components/schemas/szonesAutoCreateTag'
                - $ref: '#/components/schemas/szoneCreateFromRefTag'
                - $ref: '#/components/schemas/szonesCreateFromRefTag'
            examples:
              modbus_serial_slave_post_szone_coils:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
              modbus_serial_slave_post_szones_coils:
                value:
                  - serSlaveId: 1
                    dataFormat: 0
                    address: 0
                    quan: 10
                  - serSlaveId: 1
                    dataFormat: 0
                    address: 10
                    quan: 10
              modbus_serial_slave_post_szone_coils_with_auto_create_tags:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
                  dataType: "boolean"
              modbus_serial_slave_post_szones_coils_with_auto_create_tags:
                value:
                  - serSlaveId: 1
                    dataFormat: 0
                    address: 0
                    quan: 10
                    dataType: "boolean"
                  - serSlaveId: 1
                    dataFormat: 0
                    address: 10
                    quan: 10
                    dataType: "boolean"
              modbus_serial_slave_post_szone_discrete_inputs:
                value:
                  serSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
              modbus_serial_slave_post_szone_holding_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
              modbus_serial_slave_post_szone_input_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
              modbus_tcp_slave_post_szone_coils:
                value:
                  tcpSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
              modbus_tcp_slave_post_szone_discrete_inputs:
                value:
                  tcpSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
              modbus_tcp_slave_post_szone_holding_registers:
                value:
                  tcpSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
              modbus_tcp_slave_post_szone_input_registers:
                value:
                  tcpSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
              modbus_tcp_slave_post_szone_create_from_refTag_int32:
                value:
                  tcpSlaveId: 1
                  refTags:
                    - prvdName: "modbus_tcp_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_tcp_slave_post_szone_create_from_refTag_boolean:
                value:
                  tcpSlaveId: 1
                  refTags:
                    - prvdName: "modbus_tcp_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_tcp_slave_post_szones_create_from_refTags:
                value:
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "speed"
              modbus_tcp_slave_post_szones_create_from_refTags (deprecated, only used in TPE2 (edge-dx-engine)):
                value:
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                        dataType: "int32"
                        access: "w"
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "speed"
                        dataType: "string"
                        access: "w"
                        dataSize: 10
              modbus_tcp_slave_post_szones_create_with_provider_tag_int32 (without parameters):
                value:
                  - tcpSlaveId: 1
                    dataFormat: 2
                    address: 100
                    quan: 2
                    swap: 0
                    fromRefTaglist: 0
                    tags:
                      - name: "tag1_t1"
                        dataType: "int32"
                        access: "rw"
                  - tcpSlaveId: 1
                    dataFormat: 2
                    address: 102
                    quan: 2
                    swap: 0 
                    fromRefTaglist: 0
                    tags:
                      - name: "tag1_t2"
                        dataType: "int32"
                        access: "rw"
              modbus_tcp_slave_post_szones_create_with_provider_tag_raw (without parameters):
                value:
                  - tcpSlaveId: 1
                    dataFormat: 2
                    address: 100
                    quan: 5
                    swap: 0
                    fromRefTaglist: 0
                    tags:
                      - name: "tag2"
                        dataType: "raw"
                        access: "rw"
                        dataSize: 10
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szones'
              examples:
                post_szones_create_from_refTags:
                  value:
                    data:
                      - szoneId: 1
                        rowId: 0
                        tcpSlaveId: 1
                        dataFormat: 3
                        address: 0
                        quan: 1
                        swap: 0
                        fromRefTaglist: 1
                        tags: []
                        refTags:
                          - refTagId: 1
                            szoneId: 1
                            prvdName: "modbus_tcp_master"
                            srcName: "moxa-device"
                            tagName: "voltage"
                            access: "r"
                            dataType: "uint16"
                modbus_tcp_slave_post_szones_create_with_provider_tag_int32 (without parameters):
                  value:
                    data:
                    - szoneId: 2
                      rowId: 1
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 100
                      quan: 2
                      swap: 0
                      fromRefTaglist: 0
                      tags:
                        - tagId: 2
                          szoneId: 2
                          name: "tag1_t1"
                          dataType: "int32"
                          access: "rw"
                          offset: 0
                    - szoneId: 3
                      rowId: 2
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 102
                      quan: 2
                      swap: 0
                      fromRefTaglist: 0
                      tags:
                        - tagId: 3
                          szoneId: 3
                          name: "tag1_t2"
                          dataType: "int32"
                          access: "rw"
                          offset: 0
                modbus_tcp_slave_post_szones_create_with_provider_tag_raw (without parameters):
                  value:
                    data:
                      - szoneId: 1
                        rowId: 1
                        tcpSlaveId: 1
                        dataFormat: 2
                        address: 100
                        quan: 5
                        swap: 0
                        fromRefTaglist: 0
                        tags:
                          - tagId: 1
                            szoneId: 1
                            name: "tag2"
                            dataType: "raw"
                            access: "rw"
                            dataSize: 10
                            offset: 0
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                ref-tag already exists:
                  value:
                    error:
                      message: 'ref-tags.prvdName, ref-tags.srcName, ref-tags.tagName exists already'
                ref-tag not found:
                  value:
                    error:
                      message: 'Fail to add data in szones'
    delete:
      summary: Delete all slave zones or specific zones configuration. If there is NO query added, it means delete all slave zones.
      tags:
      - Slave Zones
      parameters:
        - in: query
          name: delAll
          description: /szones?delAll=false would delete one or more szoneId(s) specified in the payload.
          schema:
            type: string
            enum: ["false"]
      requestBody:
        description: szoneId(s) to be deleted.
        content:
          application/json:
            schema:
              required:
              - szoneId
              properties:
                szoneId:
                  type: array
                  items:
                    type: integer
            examples:
              delete specific slave zones:
                value:
                  szoneId:
                    - 1
                    - 3
                    - 4
      responses:
        204:
          description: Success.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                szoneId array not found:
                  value:
                    error:
                      message: 'Key(szoneId) not found'
                szone not exists:
                  value:
                    error:
                      message: 'szoneId(%d) not exists'
  
    put:
        summary: Update all slave zones configuration
        tags:
        - Slave Zones
        requestBody:
          description: Slave zone data.
          required: true
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/szone'
                  - $ref: '#/components/schemas/szones'
              examples:
                modbus_tcp_slave_put_szone:
                  value:
                    - szoneId: 1
                      rowId: 1
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 0
                      quan: 1
                      swap: 0
                      fromRefTaglist: 1
                modbus_tcp_slave_put_szones:
                  value:
                    - szoneId: 1
                      rowId: 1
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 0
                      quan: 1
                      swap: 0
                      fromRefTaglist: 1
                    - szoneId: 2
                      rowId: 2
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 1
                      quan: 1
                      swap: 0
                      fromRefTaglist: 1
        responses:
          200:
            description: Success.
            content:
              application/json:
                schema:
                  properties:
                    data:
                      oneOf:
                        - $ref: '#/components/schemas/szone'
                        - $ref: '#/components/schemas/szones'
          400:
            $ref: '#/components/responses/UnexpectedError'

  /config/szones/{szoneId}:
    get:
      summary: Get specific slave zone's configuration
      tags:
      - Slave Zones
      parameters:
        - name: "szoneId"
          in : "path"
          description: ID of szone.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szone'
              examples:
                get_szones_with_refTags:
                  value:
                    data:
                      szoneId: 1
                      rowId: 0
                      tcpSlaveId: 1
                      dataFormat: 3
                      address: 0
                      quan: 1
                      swap: 0
                      fromRefTaglist: 1
                      tags: []
                      refTags:
                        - refTagId: 1
                          szoneId: 1
                          prvdName: "modbus_tcp_master"
                          srcName: "moxa-device"
                          tagName: "voltage"
                          access: "r"
                          dataType: "uint16"
        404:
          $ref: '#/components/responses/DbNotFoundError'
    delete:
      summary: Delete specific slave zone's configuration
      tags:
      - Slave Zones
      parameters:
        - name: szoneId
          in : "path"
          description: ID of szone.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        404:
          $ref: '#/components/responses/DbNotFoundError'
    put:
      summary: Modify all of slave zone configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Slave Zones
      parameters:
        - name: szoneId
          in: "path"
          description: ID of szone.
          required: true
          schema:
            type: string
        - in: query
          name: autoCreate
          description: /szones?autoCreate=tags would create tags automatically. dataType must be added in payload.
          schema:
            type: string
            enum: [tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/szone'
                - $ref: '#/components/schemas/szoneAutoCreateTag'
            examples:
              modbus_serial_slave_put_szone_coils:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_serial_slave_put_szone_coils_with_auto_create_tags:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
                  dataType: "boolean"
              modbus_serial_slave_put_szone_discrete_inputs:
                value:
                  serSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_serial_slave_put_szone_holding_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_serial_slave_put_szone_input_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_tcp_slave_put_szone_coils:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_tcp_slave_put_szone_discrete_inputs:
                value:
                  serSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_tcp_slave_put_szone_holding_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
              modbus_tcp_slave_put_szone_input_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
                  fromRefTaglist: 1
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szone'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific slave zone configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Slave Zones
      parameters:
        - name: szoneId
          in: "path"
          description: ID of szone.
          required: true
          schema:
            type: string
        - in: query
          name: autoCreate
          description: /szones?autoCreate=tags would create tags automatically. dataType must be added in payload.
          schema:
            type: string
            enum: [tags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/szone_req'
                - $ref: '#/components/schemas/szoneAutoCreateTag'
            examples:
              modbus_serial_slave_patch_szone_coils:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
              modbus_serial_slave_patch_szone_coils_with_auto_create_tags:
                value:
                  serSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
                  dataType: "boolean"
              modbus_serial_slave_patch_szone_discrete_inputs:
                value:
                  serSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
              modbus_serial_slave_patch_szone_holding_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
              modbus_serial_slave_patch_szone_input_registers:
                value:
                  serSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
              modbus_tcp_slave_patch_szone_coils:
                value:
                  tcpSlaveId: 1
                  dataFormat: 0
                  address: 0
                  quan: 10
              modbus_tcp_slave_patch_szone_discrete_inputs:
                value:
                  tcpSlaveId: 1
                  dataFormat: 1
                  address: 0
                  quan: 10
              modbus_tcp_slave_patch_szone_holding_registers:
                value:
                  tcpSlaveId: 1
                  dataFormat: 2
                  address: 0
                  quan: 10
              modbus_tcp_slave_patch_szone_input_registers:
                value:
                  tcpSlaveId: 1
                  dataFormat: 3
                  address: 0
                  quan: 10
              modify szone address:
                value:
                  address: 10
              modbus_tcp_slave_patch_szones_create_with_provider_tag_int32:
                value:
                  tcpSlaveId: 1
                  dataFormat: 2
                  address: 100
                  quan: 2
                  swap: 0               
                  fromRefTaglist: 0
                  tags:
                    - name: "tag1"
                      dataType: "int32"
                      access: "rw"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szone'
              examples:
                szones_with_refTags:
                  value:
                    data:
                      szoneId: 1
                      rowId: 0
                      tcpSlaveId: 1
                      dataFormat: 3
                      address: 0
                      quan: 1
                      swap: 0
                      fromRefTaglist: 1
                      tags: []
                      refTags:
                        - refTagId: 1
                          szoneId: 1
                          prvdName: "modbus_tcp_master"
                          srcName: "moxa-device"
                          tagName: "voltage"
                          access: "r"
                          dataType: "uint16"
                modbus_tcp_slave_patch_szones_create_with_provider_tag_int32:
                  value:
                    data:
                      szoneId: 2
                      rowId: 2
                      tcpSlaveId: 1
                      dataFormat: 2
                      address: 100
                      quan: 2
                      fromRefTaglist: 0
                      swap: 0
                      tags:
                        - tagId: 2
                          szoneId: 2
                          name: "tag1"
                          dataType: "int32"
                          access: "rw"
                          offset: 0                    
        400:
          $ref: '#/components/responses/DbBadRequestError'
        404:
          $ref: '#/components/responses/DbNotFoundError'

  /config/szones/delete:
    post:
      summary: Delete multiple szones and ref-tags.
      tags:
      - Slave Zones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/szones'
            examples:
                modbus_tcp_slave_put_szone:
                  value:
                   szones_id:
                   - 1
                   - 2
                   - 3
      responses:
        201:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /bulk/ref-tags:
    post:
      summary: Add bulk ref-tags. The access, dataType, dataSize of the ref-tag are fetched by mx-modbus automatically.
      tags:
        - Ref-Tags
      requestBody:
        description: Slave zone data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkRefTags'
            examples:
              modbus_tcp_slave_post_szone_create_from_refTag_int32:
                value:
                  tcpSlaveId: 1
                  refTags:
                    - prvdName: "modbus_tcp_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_tcp_slave_post_szone_create_from_refTag_boolean:
                value:
                  tcpSlaveId: 1
                  refTags:
                    - prvdName: "modbus_tcp_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_tcp_slave_post_szones_create_from_refTags:
                value:
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "speed"
              modbus_tcp_slave_post_szones_create_from_refTags (deprecated, only used in TPE2 (edge-dx-engine)):
                value:
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                        dataType: "int32"
                        access: "w"
                  - tcpSlaveId: 1
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "speed"
                        dataType: "string"
                        access: "w"
                        dataSize: 10
              modbus_tcp_slave_post_szones_create_from_refTag_with_minStartAddr:
                value:
                  - tcpSlaveId: 1
                    minStartAddr: 100
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                  - tcpSlaveId: 1
                    minStartAddr: 200
                    refTags:
                      - prvdName: "modbus_tcp_master"
                        srcName: "moxa-device"
                        tagName: "speed"
              modbus_ser_slave_post_szone_create_from_refTag_int32:
                value:
                  serSlaveId: 1
                  refTags:
                    - prvdName: "modbus_ser_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_ser_slave_post_szone_create_from_refTag_boolean:
                value:
                  serSlaveId: 1
                  refTags:
                    - prvdName: "modbus_ser_master"
                      srcName: "moxa-device"
                      tagName: "voltage"
              modbus_ser_slave_post_szones_create_from_refTags:
                value:
                  - serSlaveId: 1
                    refTags:
                      - prvdName: "modbus_ser_master"
                        srcName: "moxa-device"
                        tagName: "voltage"
                  - serSlaveId: 1
                    refTags:
                      - prvdName: "modbus_ser_master"
                        srcName: "moxa-device"
                        tagName: "speed"
      responses:
        201:
          description: |
            Success.
            
            All szones (as well as their tags, refTags) of the modbus slave are returned.
            
            The "rowId" is 0-based and unique within all tags sharing the same tcpSlaveId / serSlaveId and dataFormat.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szones'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                ref-tag not found:
                  value:
                    error:
                      message: 'failed to get value info of tag %s'
  
  /config-and-apply/szones:
    put:
      summary: Update tcp slaves and serial slaves zones configuration
      tags:
      - Apply
      parameters:
        - in: query
          name: tcpSlaveId
          description: ?tcpSlaveId={tcpSlaveId} would return the config of the tcp slave with tcpSlaveId={tcpSlaveId}
          schema:
              type: integer
        - in: query
          name: serSlaveId
          description: ?serSlaveId={serSlaveId} would return the config of the serial slave with serSlaveId={serSlaveId}
          schema:
            type: integer
      requestBody:
        description: Slave zone data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/szone'
                - $ref: '#/components/schemas/szones'
            examples:
              modbus_tcp_slave_consumer_put_szone:
                value:
                  - szoneId: 1
                    rowId: 1
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 0
                    quan: 1
                    fromRefTaglist: 1
              modbus_tcp_slave_consumer_put_szones:
                value:
                  - szoneId: 1
                    rowId: 1
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 0
                    quan: 1
                    fromRefTaglist: 1
                  - szoneId: 2
                    rowId: 2
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 1
                    quan: 1
                    fromRefTaglist: 1
              modbus_tcp_slave_provider_put_szone:
                value:
                  - szoneId: 1
                    rowId: 1
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 0
                    quan: 1
                    fromRefTaglist: 0
              modbus_tcp_slave_provider_put_szones:
                value:
                  - szoneId: 1
                    rowId: 1
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 0
                    quan: 1
                    fromRefTaglist: 1
                  - szoneId: 2
                    rowId: 2
                    tcpSlaveId: 1
                    dataFormat: 2
                    address: 1
                    quan: 1
                    fromRefTaglist: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/tcpSlave'
                      - $ref: '#/components/schemas/serSlave'
              examples:
                modbus_tcp_slave_consumer_put_szones_resp:
                  value:
                    data:
                      tcpSlaveId: 1
                      configId: 1
                      slaveId: 1
                      listenPort: 502
                      maxRefTagQuan: 5000
                      maxRefTagByte: 0
                      maxTagAndRefTagQuan: 0
                      maxTagAndRefTagByte: 0
                      customTagSrcName: "local_device"
                      keepAliveTime: 1
                      name: "modbus_tcp_slave"
                      enable: 1
                      szones:
                        - szoneId: 1
                          rowId: 1
                          serSlaveId: 0
                          tcpSlaveId: 1
                          dataFormat: 2
                          address: 0
                          quan: 10
                          swap: 0
                          fromRefTaglist: 1
                          ref-tags:
                            - refTagId: 1
                              szoneId: 1
                              prvdName: "modbus_tcp_master"
                              srcName: "moxa-device"
                              tagName: "voltage"
                              dataType: "int32"
                              access: "w"
                modbus_tcp_slave_provider_put_szones_resp:
                  value:
                    data:
                      tcpSlaveId: 1
                      configId: 1
                      slaveId: 1
                      listenPort: 502
                      maxRefTagQuan: 5000
                      maxRefTagByte: 0
                      maxTagAndRefTagQuan: 0
                      maxTagAndRefTagByte: 0
                      customTagSrcName: "local_device"
                      keepAliveTime: 1
                      name: "modbus_tcp_slave"
                      enable: 1
                      szones:
                        - szoneId: 1
                          rowId: 1
                          serSlaveId: 0
                          tcpSlaveId: 1
                          dataFormat: 2
                          address: 0
                          quan: 10
                          swap: 0
                          fromRefTaglist: 0
                          tags:
                            - tagId: 1
                              szoneId: 1
                              mcmdId: 1
                              name: "read_command_tag1"
                              dataType: "raw"
                              dataUnit: "%"
                              access: "rw"
                              dataSize: 20
                              offset: 0
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tags:
    get:
      summary: Get all of tags' configurations
      tags:
      - Tags
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tags'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Add tag(s) configuration
      tags:
        - Tags
      requestBody:
        description: Tag data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/tag'
              - $ref: '#/components/schemas/tags'
            examples:
              modbus_master_read_command_int16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag"
                  dataType: "int16"
                  access: "r"
                  offset: 0
              modbus_master_read_command_int16_tags:
                value:
                  - mcmdId: 1
                    name: "read_command_int16_tag"
                    dataType: "int16"
                    access: "r"
                    offset: 0
                  - mcmdId: 1
                    name: "read_command_int16_tag2"
                    dataType: "int16"
                    access: "r"
                    offset: 2
              modbus_master_read_command_int32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int32_tag"
                  dataType: "int32"
                  access: "r"
                  offset: 0
              modbus_master_read_command_int64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "int64"
                  access: "r"
                  offset: 0
              modbus_master_read_command_uint16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_uint16_tag"
                  dataType: "uint16"
                  access: "r"
                  offset: 0
              modbus_master_read_command_uint32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_uint32_tag"
                  dataType: "uint32"
                  access: "r"
                  offset: 0
              modbus_master_read_command_uint64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "uint64"
                  access: "r"
                  offset: 0
              modbus_master_read_command_float_tag:
                value:
                  mcmdId: 3
                  name: "read_command_float_tag"
                  dataType: "float"
                  access: "r"
                  offset: 0
              modbus_master_read_command_double_tag:
                value:
                  mcmdId: 3
                  name: "read_command_double_tag"
                  dataType: "double"
                  access: "r"
                  offset: 0
              modbus_master_read_command_boolean_tag:
                value:
                  mcmdId: 1
                  name: "read_command_boolean_tag"
                  dataType: "boolean"
                  access: "r"
                  offset: 0
              modbus_master_read_command_string_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_string_tag_with_20bytes"
                  dataType: "string"
                  access: "r"
                  dataSize: 20
                  offset: 0
              modbus_master_read_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "r"
                  dataSize: 20
                  offset: 0
              modbus_master_write_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "write_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "w"
                  dataSize: 20
                  offset: 0
              modbus_master_readwrite_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "readwrite_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "rw"
                  dataSize: 20
                  offset: 0
              modbus_master_read_command_int16_tag_without_offset:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag_without_offset"
                  dataType: "int16"
                  access: "r"
                  offset: 0
              modbus_master_read_command_int16_tag_with_offset:
                value:
                  mcmdId: 2
                  name: "read_command_int16_tag_with_offset"
                  dataType: "int16"
                  access: "r"
                  offset: 2
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/tag'
                      - $ref: '#/components/schemas/tags'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete all tags configuration
      tags:
      - Tags
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /config/tags/{tagId}:
    get:
      summary: Get specific tag's configuration
      tags:
      - Tags
      parameters:
        - name: "tagId"
          in : "path"
          description: ID of tag.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tag'
        400:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete specific tag's configuration
      tags:
      - Tags
      parameters:
        - name: tagId
          in : "path"
          description: ID of tag.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify all of tag configuration
      description: The configuration which does not belong to the request would be the default value.
      tags:
      - Tags
      parameters:
        - name: tagId
          in: "path"
          description: ID of tag.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
            examples:
              modbus_master_read_command_int16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag"
                  dataType: "int16"
                  access: "r"
              modbus_master_read_command_int32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int32_tag"
                  dataType: "int32"
                  access: "r"
              modbus_master_read_command_int64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "int64"
                  access: "r"
              modbus_master_read_command_uint16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_uint16_tag"
                  dataType: "uint16"
                  access: "r"
              modbus_master_read_command_uint32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_uint32_tag"
                  dataType: "uint32"
                  access: "r"
              modbus_master_read_command_uint64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "uint64"
                  access: "r"
              modbus_master_read_command_float_tag:
                value:
                  mcmdId: 3
                  name: "read_command_float_tag"
                  dataType: "float"
                  access: "r"
              modbus_master_read_command_double_tag:
                value:
                  mcmdId: 3
                  name: "read_command_double_tag"
                  dataType: "double"
                  access: "r"
              modbus_master_read_command_boolean_tag:
                value:
                  mcmdId: 1
                  name: "read_command_boolean_tag"
                  dataType: "boolean"
                  access: "r"
              modbus_master_read_command_string_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_string_tag_with_20bytes"
                  dataType: "string"
                  access: "r"
                  dataSize: 20
              modbus_master_read_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "r"
                  dataSize: 20
              modbus_master_write_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "write_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "w"
                  dataSize: 20
              modbus_master_readwrite_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "readwrite_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "rw"
                  dataSize: 20
              modbus_master_read_command_int16_tag_without_offset:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag_without_offset"
                  dataType: "int16"
                  access: "r"
              modbus_master_read_command_int16_tag_with_offset:
                value:
                  mcmdId: 2
                  name: "read_command_int16_tag_with_offset"
                  dataType: "int16"
                  access: "r"
                  offset: 2
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tag'
        400:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Modify some of specific tag configuration
      description: The configuration which does not belong to the request would not be changed.
      tags:
      - Tags
      parameters:
        - name: tagId
          in: "path"
          description: ID of tag.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag'
            examples:
              modbus_master_read_command_int16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag"
                  dataType: "int16"
                  access: "r"
              modbus_master_read_command_int32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int32_tag"
                  dataType: "int32"
                  access: "r"
              modbus_master_read_command_int64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "int64"
                  access: "r"
              modbus_master_read_command_uint16_tag:
                value:
                  mcmdId: 1
                  name: "read_command_uint16_tag"
                  dataType: "uint16"
                  access: "r"
              modbus_master_read_command_uint32_tag:
                value:
                  mcmdId: 2
                  name: "read_command_uint32_tag"
                  dataType: "uint32"
                  access: "r"
              modbus_master_read_command_uint64_tag:
                value:
                  mcmdId: 2
                  name: "read_command_int64_tag"
                  dataType: "uint64"
                  access: "r"
              modbus_master_read_command_float_tag:
                value:
                  mcmdId: 3
                  name: "read_command_float_tag"
                  dataType: "float"
                  access: "r"
              modbus_master_read_command_double_tag:
                value:
                  mcmdId: 3
                  name: "read_command_double_tag"
                  dataType: "double"
                  access: "r"
              modbus_master_read_command_boolean_tag:
                value:
                  mcmdId: 1
                  name: "read_command_boolean_tag"
                  dataType: "boolean"
                  access: "r"
              modbus_master_read_command_string_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_string_tag_with_20bytes"
                  dataType: "string"
                  access: "r"
                  dataSize: 20
              modbus_master_read_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "read_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "r"
                  dataSize: 20
              modbus_master_write_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "write_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "w"
                  dataSize: 20
              modbus_master_readwrite_command_rawdata_tag_with_20bytes:
                value:
                  mcmdId: 1
                  name: "readwrite_command_rawdata_tag_with_20bytes"
                  dataType: "raw"
                  access: "rw"
                  dataSize: 20
              modbus_master_read_command_int16_tag_without_offset:
                value:
                  mcmdId: 1
                  name: "read_command_int16_tag_without_offset"
                  dataType: "int16"
                  access: "r"
              modbus_master_read_command_int16_tag_with_offset:
                value:
                  mcmdId: 2
                  name: "read_command_int16_tag_with_offset"
                  dataType: "int16"
                  access: "r"
                  offset: 2
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/tag'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/daemon/start:
    put:
      summary: Start the Modbus module, configuration will reload
      tags:
        - Control
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/daemon/stop:
    put:
      summary: Stop the Modbus module
      tags:
        - Control
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/daemon/restart:
    put:
      summary: Restart the Modbus module, configuration will reload
      tags:
        - Control
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/config/factory-default:
    put:
      summary: Reset the configuration of Modbus module
      tags:
        - Control
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/config/apply:
    put:
      summary: Apply the Modbus configuration(it will restart the modbus daemon)
      tags:
        - Control
      responses:
        200:
          description: Success.

  /control/config/undo:
    put:
      summary: Undo the Modbus configuration for un-applied status.
      tags:
        - Control
      responses:
        200:
          description: Success.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/config/clone:
    put:
      summary: Clone the certain resource's configuration
      tags:
        - Control
      requestBody:
        description: Resource of clone target.
        required: true
        content:
          application/json:
            schema:
              properties:
                resource:
                  description: Resource name
                  type: string
                  enum:
                    - remote-devs
                    - master-ser-ifaces
                src:
                  type: object
                  properties:
                    remoteDevId:
                      description: Remote device ID when resource name is remote-devs.
                      type: integer
                    masterSerIfaceId:
                      description: Serial interface Id when resource name is master-ser-ifaces.
                      type: integer
                dest:
                  type: object
                  properties:
                    masterSerIfaceIds:
                      description: Serial interface Ids for clone serial interface
                      type: array
                      items:
                        type: integer
                    name:
                      description: new device name when clone remote device
                      type: string
                    slaveId:
                      description: Slave ID of new remote device.
                      type: integer
                    slaveIpaddr:
                      description: Slave IP address for TCP remote-dev
                      type: string
                    slaveTcpPort:
                      description: tcp prot for TCP remote-dev
                      type: integer
                    enable:
                      description: new remote device is enable or disable
            examples:
              clone_ser_remote_device_id1:
                value:
                  resource: remote-devs
                  src:
                    remoteDevId: 1
                  dest:
                    name: dev1_1
                    slaveId: 2
                    enable: 1
              clone_tcp_remote_device_id2:
                value:
                  resource: remote-devs
                  src:
                    remoteDevId: 2
                  dest:
                    name: dev2_1
                    slaveIpaddr: "1.1.1.1"
                    slaveTcpPort: 502
                    slaveId: 3
                    enable: 0
              clone_master_serial_interface:
                value:
                  resource: master-ser-ifaces
                  src:
                    masterSerIfaceId: 1
                  dest:
                    masterSerIfaceIds:
                      - 3
              clone_master_serial_interfaces:
                value:
                  resource: master-ser-ifaces
                  src:
                    masterSerIfaceId: 1
                  dest:
                    masterSerIfaceIds:
                      - 2
                      - 3
      responses:
        200:
          description: Success.
          content:
            application/json:
              examples:
                clone_modbus_ser_remote_device_id1:
                  value:
                    data:
                      remoteDevId: 3
                      masterSerIfaceId: 1
                      name: "dev1_1"
                      enable: 1
                      slaveId: 2
                clone_modbus_tcp_remote_device_id2:
                  value:
                    data:
                      remoteDevId: 4
                      masterTcpIfaceId: 1
                      name: "dev2_1"
                      enable: 0
                      slaveIpaddr: "1.1.1.1"
                      slaveTcpPort: 502
                      slaveId: 3
                      mcmds:
                        - name: mcmd1
                          enable: 1
                          mode: 1
                          func: 16
                          readAddress: 0
                          readQuantity: 2
                          pollInterval: 1000
                          swap: 0
                          fpFunc: 0
                          fpTout: 36000
                          fpData: 00 00
                          scalingFunc: 0
                          interceptSlope: 1
                          interceptOffset: 0
                          pointSourceMin: 0
                          pointSourceMax: 1
                          tags:
                           - name: tag1
                             dataType: int16
                             access: w
                             offset: 0
                clone_master_serial_interfaces:
                  value:
                    data:
                      - masterSerIfaceId: 3
                        serMasterId: 1
                        portValue: 2
                        format: 0
                        reryCount: 3
                        responseTout: 1000
                        frameInterval: 0
                        remoteDevs:
                          - remoteDevId: 6
                            masterSerIfaceId: 2
                            name: dev3_1
                            enable: 1
                            slaveId: 1
                            slaveIpaddr: 0.0.0.0
                            slaveTcpPort: 502
                            mcmds:
                              - mcmdId: 22
                                remoteDevId: 6
                                name: mcmd1
                                enable: 1
                                mode: 0
                                func: 3
                                readAddress: 0
                                readQuantity: 2
                                writeAddress: 0
                                writeQuantity: 1
                                pollinterval: 1000
                                swap: 0
                                fpFunc: 0
                                fpTout: 3600
                                fpData: 00 00
                                scalingFunc: 0
                                interceptSlope: 1
                                interceptOffset: 0
                                pointSourceMin: 0
                                pointSourceMax: 1
                                pointTargetMin: 0
                                pointTargetMax: 1
                                tags:
                                  - tagId: 5
                                    mcmdId: 22
                                    name: mcmd1
                                    dataType: raw
                                    access: r
                                    dataSize:  4
                                    offset: 0
                      - masterSerIfaceId: 4
                        serMasterId: 1
                        portValue: 3
                        format: 0
                        reryCount: 3
                        responseTout: 1000
                        frameInterval: 0
                        remoteDevs:
                          - remoteDevId: 7
                            masterSerIfaceId: 2
                            name: dev3_2
                            enable: 1
                            slaveId: 1
                            slaveIpaddr: 0.0.0.0
                            slaveTcpPort: 502
                            mcmds:
                              - mcmdId: 23
                                remoteDevId: 7
                                name: mcmd1
                                enable: 1
                                mode: 0
                                func: 3
                                readAddress: 0
                                readQuantity: 2
                                writeAddress: 0
                                writeQuantity: 1
                                pollinterval: 1000
                                swap: 0
                                fpFunc: 0
                                fpTout: 3600
                                fpData: 00 00
                                scalingFunc: 0
                                interceptSlope: 1
                                interceptOffset: 0
                                pointSourceMin: 0
                                pointSourceMax: 1
                                pointTargetMin: 0
                                pointTargetMax: 1
                                tags:
                                  - tagId: 6
                                    mcmdId: 23
                                    name: mcmd1
                                    dataType: raw
                                    access: r
                                    dataSize:  4
                                    offset: 0
        400:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnexpectedError'
              examples:
                modbus_master_command_quantity_out_of_limit:
                  value:
                    error:
                      code: -113
                      message: Exceed the limit of 128 commands per tcp port
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_COMMAND_LIMIT_FAIL
                          variables:
                            quan: 128
                            mode: tcp
                modbus_master_byte_quantity_out_of_limit:
                  value:
                    error:
                      code: -114
                      message: Exceed the limit of 2048 read byte quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_BYTE_LIMIT_FAIL
                          variables:
                            quan: 2048
                            type: read
                modbus_master_tag_quantity_out_of_limit:
                  value:
                    error:
                      code: -115
                      message: Exceed the limit of 1024 read tag quantity
                      i18n:
                        message:
                          key: MODBUS_MASTER_EVENT_TAG_LIMIT_FAIL
                          variables:
                            quan: 1024
                            type: read
                modbus_master_general_failed:
                  value:
                    error:
                      code: -1
                      message: "Column error in [tableName]"

  /control/config/masters/export:
    get:
      summary: export the configuration of Modbus masters
      tags:
        - Control
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
               description: Modbus configuration file (.csv).
               type: string
               format: binary
        400:
          $ref: '#/components/responses/UnexpectedError'

  /control/config/masters/import:
    post:
      summary: import a configuration file into Modbus masters
      tags:
        - Control
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mastersFile:
                  description: Modbus masters csv file.
                  type: string
            encoding:
              mastersFile:
                  contentType: csv
      responses:
        201:
          $ref: '#/components/responses/ImportMasterResponse'
        400:
          $ref: '#/components/responses/ImportUnexpectedError'

  /control/config/mcmds/export:
    get:
      summary: export the configuration of master commands
      tags:
        - Control
      parameters:
        - in: query
          name: remoteDevId
          description: /export?remoteDevId=1.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
               description: Modbus configuration file (.csv).
               type: string
               format: binary
        400:
          description: Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                remoteDevId not exists:
                  value:
                    error:
                      message: Fail to export

  /control/config/mcmds/import:
    post:
      summary: import a configuration file into master commands for a remote device
      tags:
        - Control
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mcmdsFile:
                  description: Master command csv file.
                  type: string
                remoteDevId:
                  description: Remote device ID.
            encoding:
              mcmdsFile:
                  contentType: csv
      responses:
        201:
          $ref: '#/components/responses/ImportMcmdResponse'
        400:
          $ref: '#/components/responses/ImportUnexpectedError'

  /control/config/szone/sort:
    put:
      summary: Rearrange all szones of specific data format based on the sequence in the payload, starting from address 0.
      tags:
        - Control
      requestBody:
        description: sequence of szoneId
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - dataFormat
              - sequence
              properties:
                dataFormat:
                  description: |
                    Data format to be rearranged. 
                    * 0: Coils
                    * 1: Discretes Input
                    * 2: Holding Registers
                    * 3: Input Registers
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                  x-enum-varnames:
                    - coils
                    - discretes input
                    - holding registers
                    - input registers
                sequence:
                  $ref: '#/components/schemas/szone_sequence'
            examples:
              rearrange coils:
                value:
                  dataFormat: 0
                  sequence:
                    - szoneId: 2
                    - szoneId: 3
                    - szoneId: 1
              rearrange holding registers:
                value:
                  dataFormat: 2
                  sequence:
                    - szoneId: 2
                    - szoneId: 1
                    - szoneId: 3
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/szones'
              examples:
                response_of_sort:
                  value:
                    data:
                      - szoneId: 2
                        tcpSlaveId: 1
                        dataFormat: 3
                        address: 0
                        quan: 10
                        swap: 0
                        fromRefTaglist: 1
                        tags: []
                        refTags:
                          - refTagId: 2
                            szoneId: 2
                            prvdName: "modbus_tcp_master"
                            srcName: "dev1"
                            tagName: "tag2"
                            access: "r"
                            dataType: "raw"
                            dataSize: 20
                      - szoneId: 1
                        tcpSlaveId: 1
                        dataFormat: 3
                        address: 10
                        quan: 4
                        swap: 0
                        fromRefTaglist: 1
                        tags: []
                        refTags:
                          - refTagId: 1
                            szoneId: 1
                            prvdName: "modbus_tcp_master"
                            srcName: "dev1"
                            tagName: "tag1"
                            access: "r"
                            dataType: "int64"
                      - szoneId: 3
                        tcpSlaveId: 1
                        dataFormat: 3
                        address: -1
                        quan: 10
                        swap: 0
                        fromRefTaglist: 1
                        tags: []
                        refTags:
                          - refTagId: 3
                            szoneId: 3
                            prvdName: "modbus_tcp_master"
                            srcName: "dev1"
                            tagName: "tag3"
                            access: "r"
                            dataType: "raw"
                            dataSize: 20
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Mismatched szones count:
                  value:
                    error:
                      message: 'Number of szoneId in sequence(%d) does not match the number of records in db(%d) for dataFormat(%d).'
                szoneId not exist:
                  value:
                    error:
                      message: 'szoneId(%d) does not exist in dataFormat(%d).'


  /control/log-level:
    get:
      summary: Get current modbus daemon system log level
      tags:
      - Control
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/log_level_str'
    put:
      summary: set modbus dameon system log level
      tags:
        - Control
      requestBody:
        description: system log level.
        required: true
        content:
          application/json:
            schema:
              properties:
                logLevel:
                  $ref: '#/components/schemas/log_level_str'
            examples:
              set_debug_level:
                  value:
                    logLevel: "DEBUG"
      responses:
        200:
          description: set system log level success.

        400:
          description: Invalid log level parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Failed to get logLevel:
                  value:
                    error:
                      message: "get 'level' parameter failed"
                Undefined log level:
                  value:
                    error:
                      message: "invalid 'level' parameter value in level options [ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF]"

  /operate/direct-read-tag:
    put:
      summary: trigger the tag's related command to polling and get the tag data result
      tags:
        - Operate
      requestBody:
        description: Tag information.
        required: true
        content:
          application/json:
            schema:
              properties:
                prvdName:
                  type: string
                  description: Provider name.
                srcName:
                  type: string
                  description: Source name.
                tagName:
                  type: string
                  description: Tag name.
            examples:
              trigger_master_device_tag:
                value:
                  prvdName: "modbus_tcp_master"
                  srcName: "ieg_device"
                  tagName: "command_1"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      prvdName:
                        type: string
                        description: Provider name.
                      srcName:
                        type: string
                        description: Source name.
                      tagName:
                        type: string
                        description: Tag name.
                      timestamp:
                        type: number
                        description: Slave response time (us).
                      dataType:
                        type: string
                        description: Tag type.
                        enum:
                          - raw
                          - bytearray
                          - string
                          - boolean
                          - int8
                          - int16
                          - int32
                          - int64
                          - uint8
                          - uint16
                          - uint32
                          - uint64
                          - float
                          - double
                      dateValue:
                        oneOf:
                          - type: string
                          - type: number
                        description: Tag value.
              examples:
                read_float_tag:
                  value:
                    data:
                      prvdName: "modbus_tcp_master"
                      srcName: "moxa_device"
                      tagName: "command_float"
                      timestamp: 939700
                      dataType: "float"
                      dataValue: 3.14
                read_int32_tag:
                  value:
                    data:
                      prvdName: "modbus_tcp_master"
                      srcName: " moxa_device"
                      tagName: "command_int"
                      timestamp: 939788
                      dataType: "int32"
                      dataValue: 9
                read_raw_tag:
                  value:
                    data:
                      prvdName: "modbus_tcp_master"
                      srcName: " moxa_device"
                      tagName: "command_raw_4byte"
                      timestamp: 939700
                      dataType: "raw"
                      dataValue: "05FF3244"
        400:
          description: Invalid parameters or trigger command timeout.

  /operate/direct-write-tag:
    put:
      summary: trigger the tag's related command to polling and post the tag data
      tags:
        - Operate
      requestBody:
        description: Tag information.
        required: true
        content:
          application/json:
            schema:
              properties:
                prvdName:
                  type: string
                  description: Provider name.
                srcName:
                  type: string
                  description: Device name.
                tagName:
                  type: string
                  description: Tag name.
                dataType:
                    type: string
                    description: Tag type.
                    enum:
                    - boolean
                    - int8
                    - int16
                    - int32
                    - int64
                    - uint8
                    - uint16
                    - uint32
                    - uint64
                    - float
                    - double
                    - string
                    - bytearray
                    - raw
                dateValue:
                  oneOf:
                    - type: string
                    - type: number
                  description: Tag value.
            examples:
              write_float_tag:
                  value:
                    prvdName: "modbus_tcp_master"
                    srcName: "moxa_device"
                    tagName: "command_float"
                    dataType: "float"
                    dataValue: 3.14
              write_int32_tag:
                value:
                  prvdName: "modbus_tcp_master"
                  srcName: "moxa_device"
                  tagName: "command_int"
                  dataType: "int32"
                  dataValue: 9
              write_raw_tag:
                value:
                  prvdName: "modbus_tcp_master"
                  srcName: "moxa_device"
                  tagName: "command_raw_4byte"
                  dataType: "raw"
                  dataValue: "05FF3244"
      responses:
        200:
          description: Trigger command to write tag value success.

        400:
          description: Invalid parameters or trigger command timeout.

  /diagnose/tcp-status:
    get:
      summary: Get all of TCP connection diagnose information (include clients and servers)
      tags:
      - Diagnose
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcpStatus'
              examples:
                master_tcp_diagnose (Laputa):
                  value:
                    modbus_tcp:
                    - mode: "Master"
                      numConns: 0
                      sentReqs: 0
                      recvValidResps: 0
                      recvInvalidResps: 0
                      recvExceptions: 0
                      timeout: 0
                      conns:
                        - status: "OK"
                          remoteIpPort: "127.0.0.1:1000"
                          sentReqs: 0
                          recvValidResps: 0
                          recvInvalidResps: 0
                          recvExceptions: 0
                          timeout: 0
                master_tcp_diagnose (TPE):
                  value:
                    modbus_tcp:
                    - mode: "Master"
                      numConns: 0
                      sentReqs: 0
                      recvValidResps: 0
                      recvInvalidResps: 0
                      recvExceptions: 0
                      timeout: 0
                      conns:
                        - status: "OK"
                          remoteIpPort: "127.0.0.1:1000"
                          slaveId: 1
                          sentReqs: 0
                          recvValidResps: 0
                          recvInvalidResps: 0
                          recvExceptions: 0
                          timeout: 0
                slave_tcp_diagnose:
                  value:
                    modbus_tcp:
                    - mode: "salve"
                      numConns: 0
                      recvValidReqs: 0
                      recvInvalidReqs: 0
                      sentResps: 0
                      sentExcptions: 0
                      conns:
                        - status: "OK"
                          remoteIpPort: "127.0.0.1:1000"
                          recvValidReqs: 0
                          recvInvalidReqs: 0
                          sentResps: 0
                          sentExcptions: 0
        400:
          $ref: '#/components/responses/UnexpectedError'

  /diagnose/serial-status:
    get:
      summary: Get all of serial connection diagnose information (include clients and servers)
      tags:
      - Diagnose
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serStatus'
              examples:
                serial_master_response:
                  value:
                    data:
                      modbus_serial:
                        - role: "Client"
                          sentReqs: 0
                          recvValidResps: 0
                          recvInvalidResps: 0
                          recvCrcLrcErrors: 0
                          recvExceptions: 0
                          timeout: 0
                          Ports:
                            - portNumber: 1
                              break: 0
                              frameError: 0
                              parityError: 0
                              overrunError: 0
                              mode: "RTU"
                              sentReqs: 0
                              recvValidResps: 0
                              recvInvalidResps: 0
                              recvCrcLrcErrors: 0
                              recvExceptions: 0
                              timeout: 0
                            - portNumber: 2
                              break: 0
                              frameError: 0
                              parityError: 0
                              overrunError: 0
                              mode: "ASCII"
                              sentReqs: 0
                              recvValidResps: 0
                              recvInvalidResps: 0
                              recvCrcLrcErrors: 0
                              recvExceptions: 0
                              timeout: 0
                serial_slave_response:
                  value:
                    data:
                      modbus_serial:
                        - role: "Slave"
                          recvValidReqs: 0
                          recvInvalidReqs: 0
                          recvCrcLrcErrors: 0
                          sentResps: 0
                          sentExceptions: 0
                          Ports:
                            - portNumber: 1
                              break: 0
                              frameError: 0
                              parityError: 0
                              overrunError: 0
                              mode: "RTU"
                              slaveId:  1
                              recvValidReqs: 0
                              recvInvalidReqs: 0
                              recvCrcLrcErrors: 0
                              sentResps: 0
                              sentExceptions: 0
                            - portNumber: 2
                              break: 0
                              frameError: 0
                              parityError: 0
                              overrunError: 0
                              mode: "ASCII"
                              slaveId:  2
                              recvValidReqs: 0
                              recvInvalidReqs: 0
                              recvCrcLrcErrors: 0
                              sentResps: 0
                              sentExceptions: 0                           
        400:
          $ref: '#/components/responses/UnexpectedError'

  /diagnose/protocol-status:
    get:
      summary: Get protocol status.
      tags:
      - Diagnose
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protocolStatus'
        400:
          $ref: '#/components/responses/UnexpectedError'

  /diagnose/service-info:
    get:
      summary: Get service info of all insts (tcp master, serial master, tcp slave, serial slave)
      tags:
        - Diagnose
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceInfo'
              examples:
                modbus_master_response:
                  value:
                    data:
                      serviceInfo:
                        - tcpMasterId: 1
                          serviceStatus: "RUNNING"
                        - serMasterId: 1
                          serviceStatus: "INITIALIZING"
                modbus_slave_response:
                  value:
                    data:
                      serviceInfo:
                        - tcpSlaveId: 1
                          serviceStatus: "RUNNING"
        503:
          description: No inst available.

  /traffic-log:
    get:
      summary: Get all traffic logs. Only used in Laputa.
      tags:
      - Traffic-log (Laputa)
      responses:
        200:
          description: Success to get traffic logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trafficLog'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Start/stop traffic modbus log. Only used in Laputa.
      tags:
      - Traffic-log (Laputa)
      requestBody:
        description: Action of traffic log.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trafficAction'
      responses:
        201:
          description: Success to start/stop traffic log.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /traffic-log/master-tcp-interfaces/{masterTcpIfaceId}:
    get:
      summary: Get traffic logs of specific masterTcpIface. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "masterTcpIfaceId"
          in : "path"
          description: tcp master interface id.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success to get traffic logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcpTrafficLog'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Start/stop traffic modbus log. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "masterTcpIfaceId"
          in : "path"
          description: tcp master interface id.
          required: true
          schema:
            type: string
      requestBody:
        description: Action of traffic log.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trafficAction'
      responses:
        201:
          description: Success to start/stop traffic log.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /traffic-log/master-ser-interfaces/{masterSerIfaceId}:
    get:
      summary: Get traffic logs of specific masterSerIfaceId. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "masterSerIfaceId"
          in : "path"
          description: serial master interface id.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success to get traffic logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serTrafficLog'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Start/stop traffic modbus log. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "masterSerIfaceId"
          in : "path"
          description: serial master interface id.
          required: true
          schema:
            type: string
      requestBody:
        description: Action of traffic log.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trafficAction'
      responses:
        201:
          description: Success to start/stop traffic log.
        400:
          $ref: '#/components/responses/UnexpectedError'
          
  /traffic-log/slave-tcp-interfaces/{slaveTcpIfaceId}:
    get:
      summary: Get traffic logs of specific slaveTcpIfaceId. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "slaveTcpIfaceId"
          in : "path"
          description: tcp slave interface id.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success to get traffic logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tcpTrafficLog'
        400:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Start/stop traffic modbus log. Only used in TPE.
      tags:
      - Traffic-log (TPE)
      parameters:
        - name: "slaveTcpIfaceId"
          in : "path"
          description: tcp slave interface id.
          required: true
          schema:
            type: string
      requestBody:
        description: Action of traffic log.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trafficAction'
      responses:
        201:
          description: Success to start/stop traffic log.
        400:
          $ref: '#/components/responses/UnexpectedError'

  /status/config/change:
    get:
      summary: Get status of Modbus database was modified or not
      tags:
      - Status
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        description: The status of Modbus master's database was modified or not (unchanged, changed).
                        type: integer
                example:
                  data:
                    result: 1

  /status/config/master-overview:
    get:
      summary: Get overview of Modbus master
      tags:
      - Status
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/masterOverview'
              example:
                data:
                  version: "3.0.0"
                  enableDevFailEvent: 1
                  enableCmdFailEvent: 1
                  remoteDevsName:
                    - "dev_1"
                    - "dev_2"
                    - "dev_3"
                  tcp:
                    enable: 1
                    masterTcpIfaces:
                    - masterTcpIfaceId: 1
                      devCount: 4
                      cmdCount: 20
                  serial:
                    enable: 1
                    masterSerIfaces:
                    - masterSerIfaceId: 1
                      portName: "COM1"
                      format: 0
                      devCount: 3
                      cmdCount: 30
                    - masterSerIfaceId: 2
                      portName: "COM2"
                      format: 1
                      devCount: 2
                      cmdCount: 15
                    - masterSerIfaceId: 3
                      portName: "COM3"
                      format: 1
                      devCount: 6
                      cmdCount: 35
                    - masterSerIfaceId: 4
                      portName: "COM4"
                      format: 0
                      devCount: 2
                      cmdCount: 15
        400:
          $ref: '#/components/responses/UnexpectedError'

  /status/config/slave-overview:
    get:
      summary: Get overview of Modbus slave
      tags:
      - Status
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/slaveOverview'
              example:
                data:
                  version: "3.0.0"
                  enableFailEvent: 1
                  tcp:
                    enable: 1
                    tcpSlaves:
                    - tcpSlaveId: 1
                      enable: 0
                      tagCount: 4
                  serial:
                    enable: 1
                    serSlaves:
                    - serSlaveId: 1
                      enable: 0
                      portName: "COM1"
                      format: 0
                      tagCount: 3
                    - serSlaveId: 2
                      enable: 1
                      portName: "COM2"
                      format: 0
                      tagCount: 13
                    - serSlaveId: 3
                      enable: 0
                      portName: "COM3"
                      format: 1
                      tagCount: 0
                    - serSlaveId: 4
                      enable: 0
                      portName: "COM4"
                      format: 0
                      tagCount: 5
        400:
          $ref: '#/components/responses/UnexpectedError'

  /status/config/szone-available-address:
    get:
      summary: Get minimum available address of szone for current szone information.
      tags:
      - Status
      parameters:
        - in: query
          name: szoneId
          description: e.g. "/szone-available-address?szoneId=1".
          schema:
            type: integer
        - in: query
          name: dataFormat
          description: e.g. "/szones?dataFormat=3".
          schema:
            type: integer
            enum: [0, 1, 2, 3]
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  address:
                    description: Modbus start address, like Modbus command address, it used for tag mapping used. (TPE only - address = -1 if invalid)
                    type: integer
                    maximum: 65535
                  quan:
                    description: Modbus quantity for szone, like Modbus command quantity, it used for tag mapping used.
                    type: integer
              example:
                data:
                  address: 3
                  quan: 10

  /platform/slave-tags:
    get:
      summary: Get tag list of Modbus slave
      tags:
      - Platform
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/platformTaglist'
              example:
                data:
                  - prvdName: "modbus_tcp_slave"
                    srcName: "moxa_device"
                    tagName: "voltage"
                    dataType: "int32"
                    access: "w"
                    dataSize: 4
                    dataUnit: "%"
                  - prvdName: "modbus_tcp_slave"
                    srcName: "moxa-device2"
                    tagName: "voltage"
                    dataType: "raw"
                    access: "r"
                    dataSize: 5
                    dataUnit: "%"
        400:
          $ref: '#/components/responses/UnexpectedError'

  /platform/master-tags:
    get:
      summary: Get tag list of Modbus master
      tags:
      - Platform
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/platformTaglist'
              example:
                data:
                  - prvdName: "modbus_tcp_master"
                    srcName: "moxa-device"
                    tagName: "voltage"
                    dataType: "int32"
                    access: "w"
                    dataUnit: "%"
                  - prvdName: "modbus_tcp_master"
                    srcName: "moxa-device2"
                    tagName: "voltage"
                    dataType: "raw"
                    access: "r"
                    dataSize: 5
                    dataUnit: "%"
        400:
          $ref: '#/components/responses/UnexpectedError'
